// ThreeExtras.js r32 - http://github.com/mrdoob/three.js
var THREE=THREE||{};THREE.Color=function(a){this.autoUpdate=true;this.setHex(a)};
THREE.Color.prototype={setRGB:function(a,c,f){this.r=a;this.g=c;this.b=f;if(this.autoUpdate){this.updateHex();this.updateStyleString()}},setHex:function(a){this.hex=~~a&16777215;if(this.autoUpdate){this.updateRGBA();this.updateStyleString()}},updateHex:function(){this.hex=~~(this.r*255)<<16^~~(this.g*255)<<8^~~(this.b*255)},updateRGBA:function(){this.r=(this.hex>>16&255)/255;this.g=(this.hex>>8&255)/255;this.b=(this.hex&255)/255},updateStyleString:function(){this.__styleString="rgb("+~~(this.r*255)+
","+~~(this.g*255)+","+~~(this.b*255)+")"},clone:function(){return new THREE.Color(this.hex)},toString:function(){return"THREE.Color ( r: "+this.r+", g: "+this.g+", b: "+this.b+", hex: "+this.hex+" )"}};THREE.Vector2=function(a,c){this.x=a||0;this.y=c||0};
THREE.Vector2.prototype={set:function(a,c){this.x=a;this.y=c;return this},copy:function(a){this.x=a.x;this.y=a.y;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;return this},add:function(a,c){this.x=a.x+c.x;this.y=a.y+c.y;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;return this},sub:function(a,c){this.x=a.x-c.x;this.y=a.y-c.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},unit:function(){this.multiplyScalar(1/this.length());return this},length:function(){return Math.sqrt(this.x*
this.x+this.y*this.y)},lengthSq:function(){return this.x*this.x+this.y*this.y},negate:function(){this.x=-this.x;this.y=-this.y;return this},clone:function(){return new THREE.Vector2(this.x,this.y)},toString:function(){return"THREE.Vector2 ("+this.x+", "+this.y+")"}};THREE.Vector3=function(a,c,f){this.x=a||0;this.y=c||0;this.z=f||0};
THREE.Vector3.prototype={set:function(a,c,f){this.x=a;this.y=c;this.z=f;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,c){this.x=a.x+c.x;this.y=a.y+c.y;this.z=a.z+c.z;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},sub:function(a,c){this.x=a.x-c.x;this.y=a.y-c.y;this.z=a.z-c.z;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},
cross:function(a,c){this.x=a.y*c.z-a.z*c.y;this.y=a.z*c.x-a.x*c.z;this.z=a.x*c.y-a.y*c.x;return this},crossSelf:function(a){var c=this.x,f=this.y,e=this.z;this.x=f*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-f*a.x;return this},multiply:function(a,c){this.x=a.x*c.x;this.y=a.y*c.y;this.z=a.z*c.z;return this},multiplySelf:function(a){this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},divideScalar:function(a){this.x/=a;this.y/=a;this.z/=
a;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},distanceTo:function(a){var c=this.x-a.x,f=this.y-a.y;a=this.z-a.z;return Math.sqrt(c*c+f*f+a*a)},distanceToSquared:function(a){var c=this.x-a.x,f=this.y-a.y;a=this.z-a.z;return c*c+f*f+a*a},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this},normalize:function(){var a=
Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);a>0?this.multiplyScalar(1/a):this.set(0,0,0);return this},setLength:function(a){return this.normalize().multiplyScalar(a)},isZero:function(){return Math.abs(this.x)<1.0E-4&&Math.abs(this.y)<1.0E-4&&Math.abs(this.z)<1.0E-4},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)},toString:function(){return"THREE.Vector3 ( "+this.x+", "+this.y+", "+this.z+" )"}};
THREE.Vector4=function(a,c,f,e){this.x=a||0;this.y=c||0;this.z=f||0;this.w=e||1};
THREE.Vector4.prototype={set:function(a,c,f,e){this.x=a;this.y=c;this.z=f;this.w=e;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=a.w||1;return this},add:function(a,c){this.x=a.x+c.x;this.y=a.y+c.y;this.z=a.z+c.z;this.w=a.w+c.w;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},sub:function(a,c){this.x=a.x-c.x;this.y=a.y-c.y;this.z=a.z-c.z;this.w=a.w-c.w;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;
return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},divideScalar:function(a){this.x/=a;this.y/=a;this.z/=a;this.w/=a;return this},lerpSelf:function(a,c){this.x+=(a.x-this.x)*c;this.y+=(a.y-this.y)*c;this.z+=(a.z-this.z)*c;this.w+=(a.w-this.w)*c},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)},toString:function(){return"THREE.Vector4 ("+this.x+", "+this.y+", "+this.z+", "+this.w+")"}};
THREE.Ray=function(a,c){this.origin=a||new THREE.Vector3;this.direction=c||new THREE.Vector3};
THREE.Ray.prototype={intersectScene:function(a){var c,f,e=a.objects,h=[];a=0;for(c=e.length;a<c;a++){f=e[a];if(f instanceof THREE.Mesh)h=h.concat(this.intersectObject(f))}h.sort(function(l,d){return l.distance-d.distance});return h},intersectObject:function(a){function c(H,G,j,i){i=i.clone().subSelf(G);j=j.clone().subSelf(G);var r=H.clone().subSelf(G);H=i.dot(i);G=i.dot(j);i=i.dot(r);var n=j.dot(j);j=j.dot(r);r=1/(H*n-G*G);n=(n*i-G*j)*r;H=(H*j-G*i)*r;return n>0&&H>0&&n+H<1}var f,e,h,l,d,m,k,q,s,A,
t,w=a.geometry,y=w.vertices,x=[];f=0;for(e=w.faces.length;f<e;f++){h=w.faces[f];A=this.origin.clone();t=this.direction.clone();l=a.matrix.multiplyVector3(y[h.a].position.clone());d=a.matrix.multiplyVector3(y[h.b].position.clone());m=a.matrix.multiplyVector3(y[h.c].position.clone());k=h instanceof THREE.Face4?a.matrix.multiplyVector3(y[h.d].position.clone()):null;q=a.rotationMatrix.multiplyVector3(h.normal.clone());s=t.dot(q);if(s<0){q=q.dot((new THREE.Vector3).sub(l,A))/s;A=A.addSelf(t.multiplyScalar(q));
if(h instanceof THREE.Face3){if(c(A,l,d,m)){h={distance:this.origin.distanceTo(A),point:A,face:h,object:a};x.push(h)}}else if(h instanceof THREE.Face4)if(c(A,l,d,k)||c(A,d,m,k)){h={distance:this.origin.distanceTo(A),point:A,face:h,object:a};x.push(h)}}}return x}};
THREE.Rectangle=function(){function a(){l=e-c;d=h-f}var c,f,e,h,l,d,m=true;this.getX=function(){return c};this.getY=function(){return f};this.getWidth=function(){return l};this.getHeight=function(){return d};this.getLeft=function(){return c};this.getTop=function(){return f};this.getRight=function(){return e};this.getBottom=function(){return h};this.set=function(k,q,s,A){m=false;c=k;f=q;e=s;h=A;a()};this.addPoint=function(k,q){if(m){m=false;c=k;f=q;e=k;h=q}else{c=c<k?c:k;f=f<q?f:q;e=e>k?e:k;h=h>q?
h:q}a()};this.add3Points=function(k,q,s,A,t,w){if(m){m=false;c=k<s?k<t?k:t:s<t?s:t;f=q<A?q<w?q:w:A<w?A:w;e=k>s?k>t?k:t:s>t?s:t;h=q>A?q>w?q:w:A>w?A:w}else{c=k<s?k<t?k<c?k:c:t<c?t:c:s<t?s<c?s:c:t<c?t:c;f=q<A?q<w?q<f?q:f:w<f?w:f:A<w?A<f?A:f:w<f?w:f;e=k>s?k>t?k>e?k:e:t>e?t:e:s>t?s>e?s:e:t>e?t:e;h=q>A?q>w?q>h?q:h:w>h?w:h:A>w?A>h?A:h:w>h?w:h}a()};this.addRectangle=function(k){if(m){m=false;c=k.getLeft();f=k.getTop();e=k.getRight();h=k.getBottom()}else{c=c<k.getLeft()?c:k.getLeft();f=f<k.getTop()?f:k.getTop();
e=e>k.getRight()?e:k.getRight();h=h>k.getBottom()?h:k.getBottom()}a()};this.inflate=function(k){c-=k;f-=k;e+=k;h+=k;a()};this.minSelf=function(k){c=c>k.getLeft()?c:k.getLeft();f=f>k.getTop()?f:k.getTop();e=e<k.getRight()?e:k.getRight();h=h<k.getBottom()?h:k.getBottom();a()};this.instersects=function(k){return Math.min(e,k.getRight())-Math.max(c,k.getLeft())>=0&&Math.min(h,k.getBottom())-Math.max(f,k.getTop())>=0};this.empty=function(){m=true;h=e=f=c=0;a()};this.isEmpty=function(){return m};this.toString=
function(){return"THREE.Rectangle ( left: "+c+", right: "+e+", top: "+f+", bottom: "+h+", width: "+l+", height: "+d+" )"}};THREE.Matrix3=function(){this.m=[]};THREE.Matrix3.prototype={transpose:function(){var a;a=this.m[1];this.m[1]=this.m[3];this.m[3]=a;a=this.m[2];this.m[2]=this.m[6];this.m[6]=a;a=this.m[5];this.m[5]=this.m[7];this.m[7]=a;return this}};
THREE.Matrix4=function(a,c,f,e,h,l,d,m,k,q,s,A,t,w,y,x){this.n11=a||1;this.n12=c||0;this.n13=f||0;this.n14=e||0;this.n21=h||0;this.n22=l||1;this.n23=d||0;this.n24=m||0;this.n31=k||0;this.n32=q||0;this.n33=s||1;this.n34=A||0;this.n41=t||0;this.n42=w||0;this.n43=y||0;this.n44=x||1};
THREE.Matrix4.prototype={identity:function(){this.n11=1;this.n21=this.n14=this.n13=this.n12=0;this.n22=1;this.n32=this.n31=this.n24=this.n23=0;this.n33=1;this.n43=this.n42=this.n41=this.n34=0;this.n44=1;return this},set:function(a,c,f,e,h,l,d,m,k,q,s,A,t,w,y,x){this.n11=a;this.n12=c;this.n13=f;this.n14=e;this.n21=h;this.n22=l;this.n23=d;this.n24=m;this.n31=k;this.n32=q;this.n33=s;this.n34=A;this.n41=t;this.n42=w;this.n43=y;this.n44=x;return this},copy:function(a){this.n11=a.n11;this.n12=a.n12;this.n13=
a.n13;this.n14=a.n14;this.n21=a.n21;this.n22=a.n22;this.n23=a.n23;this.n24=a.n24;this.n31=a.n31;this.n32=a.n32;this.n33=a.n33;this.n34=a.n34;this.n41=a.n41;this.n42=a.n42;this.n43=a.n43;this.n44=a.n44;return this},lookAt:function(a,c,f){var e=new THREE.Vector3,h=new THREE.Vector3,l=new THREE.Vector3;l.sub(a,c).normalize();e.cross(f,l).normalize();h.cross(l,e).normalize();this.n11=e.x;this.n12=e.y;this.n13=e.z;this.n14=-e.dot(a);this.n21=h.x;this.n22=h.y;this.n23=h.z;this.n24=-h.dot(a);this.n31=l.x;
this.n32=l.y;this.n33=l.z;this.n34=-l.dot(a);this.n43=this.n42=this.n41=0;this.n44=1;return this},multiplyVector3:function(a){var c=a.x,f=a.y,e=a.z,h=1/(this.n41*c+this.n42*f+this.n43*e+this.n44);a.x=(this.n11*c+this.n12*f+this.n13*e+this.n14)*h;a.y=(this.n21*c+this.n22*f+this.n23*e+this.n24)*h;a.z=(this.n31*c+this.n32*f+this.n33*e+this.n34)*h;return a},multiplyVector4:function(a){var c=a.x,f=a.y,e=a.z,h=a.w;a.x=this.n11*c+this.n12*f+this.n13*e+this.n14*h;a.y=this.n21*c+this.n22*f+this.n23*e+this.n24*
h;a.z=this.n31*c+this.n32*f+this.n33*e+this.n34*h;a.w=this.n41*c+this.n42*f+this.n43*e+this.n44*h;return a},crossVector:function(a){var c=new THREE.Vector4;c.x=this.n11*a.x+this.n12*a.y+this.n13*a.z+this.n14*a.w;c.y=this.n21*a.x+this.n22*a.y+this.n23*a.z+this.n24*a.w;c.z=this.n31*a.x+this.n32*a.y+this.n33*a.z+this.n34*a.w;c.w=a.w?this.n41*a.x+this.n42*a.y+this.n43*a.z+this.n44*a.w:1;return c},multiply:function(a,c){var f=a.n11,e=a.n12,h=a.n13,l=a.n14,d=a.n21,m=a.n22,k=a.n23,q=a.n24,s=a.n31,A=a.n32,
t=a.n33,w=a.n34,y=a.n41,x=a.n42,H=a.n43,G=a.n44,j=c.n11,i=c.n12,r=c.n13,n=c.n14,v=c.n21,p=c.n22,u=c.n23,B=c.n24,C=c.n31,D=c.n32,F=c.n33,J=c.n34,M=c.n41,N=c.n42,P=c.n43,Q=c.n44;this.n11=f*j+e*v+h*C+l*M;this.n12=f*i+e*p+h*D+l*N;this.n13=f*r+e*u+h*F+l*P;this.n14=f*n+e*B+h*J+l*Q;this.n21=d*j+m*v+k*C+q*M;this.n22=d*i+m*p+k*D+q*N;this.n23=d*r+m*u+k*F+q*P;this.n24=d*n+m*B+k*J+q*Q;this.n31=s*j+A*v+t*C+w*M;this.n32=s*i+A*p+t*D+w*N;this.n33=s*r+A*u+t*F+w*P;this.n34=s*n+A*B+t*J+w*Q;this.n41=y*j+x*v+H*C+G*M;
this.n42=y*i+x*p+H*D+G*N;this.n43=y*r+x*u+H*F+G*P;this.n44=y*n+x*B+H*J+G*Q;return this},multiplySelf:function(a){var c=this.n11,f=this.n12,e=this.n13,h=this.n14,l=this.n21,d=this.n22,m=this.n23,k=this.n24,q=this.n31,s=this.n32,A=this.n33,t=this.n34,w=this.n41,y=this.n42,x=this.n43,H=this.n44,G=a.n11,j=a.n21,i=a.n31,r=a.n41,n=a.n12,v=a.n22,p=a.n32,u=a.n42,B=a.n13,C=a.n23,D=a.n33,F=a.n43,J=a.n14,M=a.n24,N=a.n34;a=a.n44;this.n11=c*G+f*j+e*i+h*r;this.n12=c*n+f*v+e*p+h*u;this.n13=c*B+f*C+e*D+h*F;this.n14=
c*J+f*M+e*N+h*a;this.n21=l*G+d*j+m*i+k*r;this.n22=l*n+d*v+m*p+k*u;this.n23=l*B+d*C+m*D+k*F;this.n24=l*J+d*M+m*N+k*a;this.n31=q*G+s*j+A*i+t*r;this.n32=q*n+s*v+A*p+t*u;this.n33=q*B+s*C+A*D+t*F;this.n34=q*J+s*M+A*N+t*a;this.n41=w*G+y*j+x*i+H*r;this.n42=w*n+y*v+x*p+H*u;this.n43=w*B+y*C+x*D+H*F;this.n44=w*J+y*M+x*N+H*a;return this},multiplyScalar:function(a){this.n11*=a;this.n12*=a;this.n13*=a;this.n14*=a;this.n21*=a;this.n22*=a;this.n23*=a;this.n24*=a;this.n31*=a;this.n32*=a;this.n33*=a;this.n34*=a;this.n41*=
a;this.n42*=a;this.n43*=a;this.n44*=a;return this},determinant:function(){return this.n14*this.n23*this.n32*this.n41-this.n13*this.n24*this.n32*this.n41-this.n14*this.n22*this.n33*this.n41+this.n12*this.n24*this.n33*this.n41+this.n13*this.n22*this.n34*this.n41-this.n12*this.n23*this.n34*this.n41-this.n14*this.n23*this.n31*this.n42+this.n13*this.n24*this.n31*this.n42+this.n14*this.n21*this.n33*this.n42-this.n11*this.n24*this.n33*this.n42-this.n13*this.n21*this.n34*this.n42+this.n11*this.n23*this.n34*
this.n42+this.n14*this.n22*this.n31*this.n43-this.n12*this.n24*this.n31*this.n43-this.n14*this.n21*this.n32*this.n43+this.n11*this.n24*this.n32*this.n43+this.n12*this.n21*this.n34*this.n43-this.n11*this.n22*this.n34*this.n43-this.n13*this.n22*this.n31*this.n44+this.n12*this.n23*this.n31*this.n44+this.n13*this.n21*this.n32*this.n44-this.n11*this.n23*this.n32*this.n44-this.n12*this.n21*this.n33*this.n44+this.n11*this.n22*this.n33*this.n44},transpose:function(){function a(c,f,e){var h=c[f];c[f]=c[e];
c[e]=h}a(this,"n21","n12");a(this,"n31","n13");a(this,"n32","n23");a(this,"n41","n14");a(this,"n42","n24");a(this,"n43","n34");return this},clone:function(){var a=new THREE.Matrix4;a.n11=this.n11;a.n12=this.n12;a.n13=this.n13;a.n14=this.n14;a.n21=this.n21;a.n22=this.n22;a.n23=this.n23;a.n24=this.n24;a.n31=this.n31;a.n32=this.n32;a.n33=this.n33;a.n34=this.n34;a.n41=this.n41;a.n42=this.n42;a.n43=this.n43;a.n44=this.n44;return a},flatten:function(){return[this.n11,this.n21,this.n31,this.n41,this.n12,
this.n22,this.n32,this.n42,this.n13,this.n23,this.n33,this.n43,this.n14,this.n24,this.n34,this.n44]},toString:function(){return"| "+this.n11+" "+this.n12+" "+this.n13+" "+this.n14+" |\n| "+this.n21+" "+this.n22+" "+this.n23+" "+this.n24+" |\n| "+this.n31+" "+this.n32+" "+this.n33+" "+this.n34+" |\n| "+this.n41+" "+this.n42+" "+this.n43+" "+this.n44+" |"}};THREE.Matrix4.translationMatrix=function(a,c,f){var e=new THREE.Matrix4;e.n14=a;e.n24=c;e.n34=f;return e};
THREE.Matrix4.scaleMatrix=function(a,c,f){var e=new THREE.Matrix4;e.n11=a;e.n22=c;e.n33=f;return e};THREE.Matrix4.rotationXMatrix=function(a){var c=new THREE.Matrix4;c.n22=c.n33=Math.cos(a);c.n32=Math.sin(a);c.n23=-c.n32;return c};THREE.Matrix4.rotationYMatrix=function(a){var c=new THREE.Matrix4;c.n11=c.n33=Math.cos(a);c.n13=Math.sin(a);c.n31=-c.n13;return c};THREE.Matrix4.rotationZMatrix=function(a){var c=new THREE.Matrix4;c.n11=c.n22=Math.cos(a);c.n21=Math.sin(a);c.n12=-c.n21;return c};
THREE.Matrix4.rotationAxisAngleMatrix=function(a,c){var f=new THREE.Matrix4,e=Math.cos(c),h=Math.sin(c),l=1-e,d=a.x,m=a.y,k=a.z;f.n11=l*d*d+e;f.n12=l*d*m-h*k;f.n13=l*d*k+h*m;f.n21=l*d*m+h*k;f.n22=l*m*m+e;f.n23=l*m*k-h*d;f.n31=l*d*k-h*m;f.n32=l*m*k+h*d;f.n33=l*k*k+e;return f};
THREE.Matrix4.makeInvert=function(a){var c=new THREE.Matrix4;c.n11=a.n23*a.n34*a.n42-a.n24*a.n33*a.n42+a.n24*a.n32*a.n43-a.n22*a.n34*a.n43-a.n23*a.n32*a.n44+a.n22*a.n33*a.n44;c.n12=a.n14*a.n33*a.n42-a.n13*a.n34*a.n42-a.n14*a.n32*a.n43+a.n12*a.n34*a.n43+a.n13*a.n32*a.n44-a.n12*a.n33*a.n44;c.n13=a.n13*a.n24*a.n42-a.n14*a.n23*a.n42+a.n14*a.n22*a.n43-a.n12*a.n24*a.n43-a.n13*a.n22*a.n44+a.n12*a.n23*a.n44;c.n14=a.n14*a.n23*a.n32-a.n13*a.n24*a.n32-a.n14*a.n22*a.n33+a.n12*a.n24*a.n33+a.n13*a.n22*a.n34-a.n12*
a.n23*a.n34;c.n21=a.n24*a.n33*a.n41-a.n23*a.n34*a.n41-a.n24*a.n31*a.n43+a.n21*a.n34*a.n43+a.n23*a.n31*a.n44-a.n21*a.n33*a.n44;c.n22=a.n13*a.n34*a.n41-a.n14*a.n33*a.n41+a.n14*a.n31*a.n43-a.n11*a.n34*a.n43-a.n13*a.n31*a.n44+a.n11*a.n33*a.n44;c.n23=a.n14*a.n23*a.n41-a.n13*a.n24*a.n41-a.n14*a.n21*a.n43+a.n11*a.n24*a.n43+a.n13*a.n21*a.n44-a.n11*a.n23*a.n44;c.n24=a.n13*a.n24*a.n31-a.n14*a.n23*a.n31+a.n14*a.n21*a.n33-a.n11*a.n24*a.n33-a.n13*a.n21*a.n34+a.n11*a.n23*a.n34;c.n31=a.n22*a.n34*a.n41-a.n24*a.n32*
a.n41+a.n24*a.n31*a.n42-a.n21*a.n34*a.n42-a.n22*a.n31*a.n44+a.n21*a.n32*a.n44;c.n32=a.n14*a.n32*a.n41-a.n12*a.n34*a.n41-a.n14*a.n31*a.n42+a.n11*a.n34*a.n42+a.n12*a.n31*a.n44-a.n11*a.n32*a.n44;c.n33=a.n13*a.n24*a.n41-a.n14*a.n22*a.n41+a.n14*a.n21*a.n42-a.n11*a.n24*a.n42-a.n12*a.n21*a.n44+a.n11*a.n22*a.n44;c.n34=a.n14*a.n22*a.n31-a.n12*a.n24*a.n31-a.n14*a.n21*a.n32+a.n11*a.n24*a.n32+a.n12*a.n21*a.n34-a.n11*a.n22*a.n34;c.n41=a.n23*a.n32*a.n41-a.n22*a.n33*a.n41-a.n23*a.n31*a.n42+a.n21*a.n33*a.n42+a.n22*
a.n31*a.n43-a.n21*a.n32*a.n43;c.n42=a.n12*a.n33*a.n41-a.n13*a.n32*a.n41+a.n13*a.n31*a.n42-a.n11*a.n33*a.n42-a.n12*a.n31*a.n43+a.n11*a.n32*a.n43;c.n43=a.n13*a.n22*a.n41-a.n12*a.n23*a.n41-a.n13*a.n21*a.n42+a.n11*a.n23*a.n42+a.n12*a.n21*a.n43-a.n11*a.n22*a.n43;c.n44=a.n12*a.n23*a.n31-a.n13*a.n22*a.n31+a.n13*a.n21*a.n32-a.n11*a.n23*a.n32-a.n12*a.n21*a.n33+a.n11*a.n22*a.n33;c.multiplyScalar(1/a.determinant());return c};
THREE.Matrix4.makeInvert3x3=function(a){var c=a.flatten();a=new THREE.Matrix3;var f=c[10]*c[5]-c[6]*c[9],e=-c[10]*c[1]+c[2]*c[9],h=c[6]*c[1]-c[2]*c[5],l=-c[10]*c[4]+c[6]*c[8],d=c[10]*c[0]-c[2]*c[8],m=-c[6]*c[0]+c[2]*c[4],k=c[9]*c[4]-c[5]*c[8],q=-c[9]*c[0]+c[1]*c[8],s=c[5]*c[0]-c[1]*c[4];c=c[0]*f+c[1]*l+c[2]*k;if(c==0)throw"matrix not invertible";c=1/c;a.m[0]=c*f;a.m[1]=c*e;a.m[2]=c*h;a.m[3]=c*l;a.m[4]=c*d;a.m[5]=c*m;a.m[6]=c*k;a.m[7]=c*q;a.m[8]=c*s;return a};
THREE.Matrix4.makeFrustum=function(a,c,f,e,h,l){var d,m,k;d=new THREE.Matrix4;m=2*h/(c-a);k=2*h/(e-f);a=(c+a)/(c-a);f=(e+f)/(e-f);e=-(l+h)/(l-h);h=-2*l*h/(l-h);d.n11=m;d.n12=0;d.n13=a;d.n14=0;d.n21=0;d.n22=k;d.n23=f;d.n24=0;d.n31=0;d.n32=0;d.n33=e;d.n34=h;d.n41=0;d.n42=0;d.n43=-1;d.n44=0;return d};THREE.Matrix4.makePerspective=function(a,c,f,e){var h;a=f*Math.tan(a*Math.PI/360);h=-a;return THREE.Matrix4.makeFrustum(h*c,a*c,h,a,f,e)};
THREE.Matrix4.makeOrtho=function(a,c,f,e,h,l){var d,m,k,q;d=new THREE.Matrix4;m=c-a;k=f-e;q=l-h;a=(c+a)/m;f=(f+e)/k;h=(l+h)/q;d.n11=2/m;d.n12=0;d.n13=0;d.n14=-a;d.n21=0;d.n22=2/k;d.n23=0;d.n24=-f;d.n31=0;d.n32=0;d.n33=-2/q;d.n34=-h;d.n41=0;d.n42=0;d.n43=0;d.n44=1;return d};
THREE.Vertex=function(a,c){this.position=a||new THREE.Vector3;this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.normal=c||new THREE.Vector3;this.normalWorld=new THREE.Vector3;this.normalScreen=new THREE.Vector3;this.tangent=new THREE.Vector4;this.__visible=true};THREE.Vertex.prototype={toString:function(){return"THREE.Vertex ( position: "+this.position+", normal: "+this.normal+" )"}};
THREE.Face3=function(a,c,f,e,h){this.a=a;this.b=c;this.c=f;this.centroid=new THREE.Vector3;this.normal=e instanceof THREE.Vector3?e:new THREE.Vector3;this.vertexNormals=e instanceof Array?e:[];this.materials=h instanceof Array?h:[h]};THREE.Face3.prototype={toString:function(){return"THREE.Face3 ( "+this.a+", "+this.b+", "+this.c+" )"}};
THREE.Face4=function(a,c,f,e,h,l){this.a=a;this.b=c;this.c=f;this.d=e;this.centroid=new THREE.Vector3;this.normal=h instanceof THREE.Vector3?h:new THREE.Vector3;this.vertexNormals=h instanceof Array?h:[];this.materials=l instanceof Array?l:[l]};THREE.Face4.prototype={toString:function(){return"THREE.Face4 ( "+this.a+", "+this.b+", "+this.c+" "+this.d+" )"}};THREE.UV=function(a,c){this.u=a||0;this.v=c||0};
THREE.UV.prototype={copy:function(a){this.u=a.u;this.v=a.v},toString:function(){return"THREE.UV ("+this.u+", "+this.v+")"}};THREE.Geometry=function(){this.vertices=[];this.faces=[];this.uvs=[];this.boundingSphere=this.boundingBox=null;this.geometryChunks={};this.hasTangents=false};
THREE.Geometry.prototype={computeCentroids:function(){var a,c,f;a=0;for(c=this.faces.length;a<c;a++){f=this.faces[a];f.centroid.set(0,0,0);if(f instanceof THREE.Face3){f.centroid.addSelf(this.vertices[f.a].position);f.centroid.addSelf(this.vertices[f.b].position);f.centroid.addSelf(this.vertices[f.c].position);f.centroid.divideScalar(3)}else if(f instanceof THREE.Face4){f.centroid.addSelf(this.vertices[f.a].position);f.centroid.addSelf(this.vertices[f.b].position);f.centroid.addSelf(this.vertices[f.c].position);
f.centroid.addSelf(this.vertices[f.d].position);f.centroid.divideScalar(4)}}},computeFaceNormals:function(a){var c,f,e,h,l,d,m=new THREE.Vector3,k=new THREE.Vector3;e=0;for(h=this.vertices.length;e<h;e++){l=this.vertices[e];l.normal.set(0,0,0)}e=0;for(h=this.faces.length;e<h;e++){l=this.faces[e];if(a&&l.vertexNormals.length){m.set(0,0,0);c=0;for(f=l.normal.length;c<f;c++)m.addSelf(l.vertexNormals[c]);m.divideScalar(3)}else{c=this.vertices[l.a];f=this.vertices[l.b];d=this.vertices[l.c];m.sub(d.position,
f.position);k.sub(c.position,f.position);m.crossSelf(k)}m.isZero()||m.normalize();l.normal.copy(m)}},computeVertexNormals:function(){var a,c,f=[],e;a=0;for(c=this.vertices.length;a<c;a++)f[a]=new THREE.Vector3;a=0;for(c=this.faces.length;a<c;a++){e=this.faces[a];if(e instanceof THREE.Face3){f[e.a].addSelf(e.normal);f[e.b].addSelf(e.normal);f[e.c].addSelf(e.normal)}else if(e instanceof THREE.Face4){f[e.a].addSelf(e.normal);f[e.b].addSelf(e.normal);f[e.c].addSelf(e.normal);f[e.d].addSelf(e.normal)}}a=
0;for(c=this.vertices.length;a<c;a++)f[a].normalize();a=0;for(c=this.faces.length;a<c;a++){e=this.faces[a];if(e instanceof THREE.Face3){e.vertexNormals[0]=f[e.a].clone();e.vertexNormals[1]=f[e.b].clone();e.vertexNormals[2]=f[e.c].clone()}else if(e instanceof THREE.Face4){e.vertexNormals[0]=f[e.a].clone();e.vertexNormals[1]=f[e.b].clone();e.vertexNormals[2]=f[e.c].clone();e.vertexNormals[3]=f[e.d].clone()}}},computeTangents:function(){function a(J,M,N,P,Q,T,S){l=J.vertices[M].position;d=J.vertices[N].position;
m=J.vertices[P].position;k=h[Q];q=h[T];s=h[S];A=d.x-l.x;t=m.x-l.x;w=d.y-l.y;y=m.y-l.y;x=d.z-l.z;H=m.z-l.z;G=q.u-k.u;j=s.u-k.u;i=q.v-k.v;r=s.v-k.v;n=1/(G*r-j*i);u.set((r*A-i*t)*n,(r*w-i*y)*n,(r*x-i*H)*n);B.set((G*t-j*A)*n,(G*y-j*w)*n,(G*H-j*x)*n);v[M].addSelf(u);v[N].addSelf(u);v[P].addSelf(u);p[M].addSelf(B);p[N].addSelf(B);p[P].addSelf(B)}var c,f,e,h,l,d,m,k,q,s,A,t,w,y,x,H,G,j,i,r,n,v=[],p=[],u=new THREE.Vector3,B=new THREE.Vector3,C=new THREE.Vector3,D=new THREE.Vector3,F=new THREE.Vector3;c=0;
for(f=this.vertices.length;c<f;c++){v[c]=new THREE.Vector3;p[c]=new THREE.Vector3}c=0;for(f=this.faces.length;c<f;c++){e=this.faces[c];h=this.uvs[c];if(e instanceof THREE.Face3){a(this,e.a,e.b,e.c,0,1,2);this.vertices[e.a].normal.copy(e.vertexNormals[0]);this.vertices[e.b].normal.copy(e.vertexNormals[1]);this.vertices[e.c].normal.copy(e.vertexNormals[2])}else if(e instanceof THREE.Face4){a(this,e.a,e.b,e.c,0,1,2);a(this,e.a,e.b,e.d,0,1,3);this.vertices[e.a].normal.copy(e.vertexNormals[0]);this.vertices[e.b].normal.copy(e.vertexNormals[1]);
this.vertices[e.c].normal.copy(e.vertexNormals[2]);this.vertices[e.d].normal.copy(e.vertexNormals[3])}}c=0;for(f=this.vertices.length;c<f;c++){F.copy(this.vertices[c].normal);e=v[c];C.copy(e);C.subSelf(F.multiplyScalar(F.dot(e))).normalize();D.cross(this.vertices[c].normal,e);e=D.dot(p[c]);e=e<0?-1:1;this.vertices[c].tangent.set(C.x,C.y,C.z,e)}this.hasTangents=true},computeBoundingBox:function(){var a;if(this.vertices.length>0){this.boundingBox={x:[this.vertices[0].position.x,this.vertices[0].position.x],
y:[this.vertices[0].position.y,this.vertices[0].position.y],z:[this.vertices[0].position.z,this.vertices[0].position.z]};for(var c=1,f=this.vertices.length;c<f;c++){a=this.vertices[c];if(a.position.x<this.boundingBox.x[0])this.boundingBox.x[0]=a.position.x;else if(a.position.x>this.boundingBox.x[1])this.boundingBox.x[1]=a.position.x;if(a.position.y<this.boundingBox.y[0])this.boundingBox.y[0]=a.position.y;else if(a.position.y>this.boundingBox.y[1])this.boundingBox.y[1]=a.position.y;if(a.position.z<
this.boundingBox.z[0])this.boundingBox.z[0]=a.position.z;else if(a.position.z>this.boundingBox.z[1])this.boundingBox.z[1]=a.position.z}}},computeBoundingSphere:function(){for(var a=this.boundingSphere===null?0:this.boundingSphere.radius,c=0,f=this.vertices.length;c<f;c++)a=Math.max(a,this.vertices[c].position.length());this.boundingSphere={radius:a}},sortFacesByMaterial:function(){function a(s){var A=[];c=0;for(f=s.length;c<f;c++)s[c]==undefined?A.push("undefined"):A.push(s[c].toString());return A.join("_")}
var c,f,e,h,l,d,m,k,q={};e=0;for(h=this.faces.length;e<h;e++){l=this.faces[e];d=l.materials;m=a(d);if(q[m]==undefined)q[m]={hash:m,counter:0};k=q[m].hash+"_"+q[m].counter;if(this.geometryChunks[k]==undefined)this.geometryChunks[k]={faces:[],materials:d,vertices:0};l=l instanceof THREE.Face3?3:4;if(this.geometryChunks[k].vertices+l>65535){q[m].counter+=1;k=q[m].hash+"_"+q[m].counter;if(this.geometryChunks[k]==undefined)this.geometryChunks[k]={faces:[],materials:d,vertices:0}}this.geometryChunks[k].faces.push(e);
this.geometryChunks[k].vertices+=l}},toString:function(){return"THREE.Geometry ( vertices: "+this.vertices+", faces: "+this.faces+", uvs: "+this.uvs+" )"}};
THREE.Camera=function(a,c,f,e){this.fov=a;this.aspect=c;this.near=f;this.far=e;this.position=new THREE.Vector3;this.target={position:new THREE.Vector3};this.autoUpdateMatrix=true;this.projectionMatrix=null;this.matrix=new THREE.Matrix4;this.up=new THREE.Vector3(0,1,0);this.translateX=function(h){h=this.target.position.clone().subSelf(this.position).normalize().multiplyScalar(h);h.cross(h.clone(),this.up);this.position.addSelf(h);this.target.position.addSelf(h)};this.translateZ=function(h){h=this.target.position.clone().subSelf(this.position).normalize().multiplyScalar(h);
this.position.subSelf(h);this.target.position.subSelf(h)};this.updateMatrix=function(){this.matrix.lookAt(this.position,this.target.position,this.up)};this.updateProjectionMatrix=function(){this.projectionMatrix=THREE.Matrix4.makePerspective(this.fov,this.aspect,this.near,this.far)};this.updateProjectionMatrix()};THREE.Camera.prototype={toString:function(){return"THREE.Camera ( "+this.position+", "+this.target.position+" )"}};THREE.Light=function(a){this.color=new THREE.Color(a)};
THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=new THREE.Light;THREE.AmbientLight.prototype.constructor=THREE.AmbientLight;THREE.DirectionalLight=function(a,c){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.intensity=c||1};THREE.DirectionalLight.prototype=new THREE.Light;THREE.DirectionalLight.prototype.constructor=THREE.DirectionalLight;
THREE.PointLight=function(a,c){THREE.Light.call(this,a);this.position=new THREE.Vector3;this.intensity=c||1};THREE.DirectionalLight.prototype=new THREE.Light;THREE.DirectionalLight.prototype.constructor=THREE.PointLight;
THREE.Object3D=function(){this.id=THREE.Object3DCounter.value++;this.position=new THREE.Vector3;this.rotation=new THREE.Vector3;this.scale=new THREE.Vector3(1,1,1);this.matrix=new THREE.Matrix4;this.translationMatrix=new THREE.Matrix4;this.rotationMatrix=new THREE.Matrix4;this.scaleMatrix=new THREE.Matrix4;this.screen=new THREE.Vector3;this.visible=this.autoUpdateMatrix=true};
THREE.Object3D.prototype={updateMatrix:function(){this.matrixPosition=THREE.Matrix4.translationMatrix(this.position.x,this.position.y,this.position.z);this.rotationMatrix=THREE.Matrix4.rotationXMatrix(this.rotation.x);this.rotationMatrix.multiplySelf(THREE.Matrix4.rotationYMatrix(this.rotation.y));this.rotationMatrix.multiplySelf(THREE.Matrix4.rotationZMatrix(this.rotation.z));this.scaleMatrix=THREE.Matrix4.scaleMatrix(this.scale.x,this.scale.y,this.scale.z);this.matrix.copy(this.matrixPosition);
this.matrix.multiplySelf(this.rotationMatrix);this.matrix.multiplySelf(this.scaleMatrix)}};THREE.Object3DCounter={value:0};THREE.Particle=function(a){THREE.Object3D.call(this);this.materials=a instanceof Array?a:[a];this.autoUpdateMatrix=false};THREE.Particle.prototype=new THREE.Object3D;THREE.Particle.prototype.constructor=THREE.Particle;THREE.Line=function(a,c){THREE.Object3D.call(this);this.geometry=a;this.materials=c instanceof Array?c:[c]};THREE.Line.prototype=new THREE.Object3D;
THREE.Line.prototype.constructor=THREE.Line;THREE.Mesh=function(a,c){THREE.Object3D.call(this);this.geometry=a;this.materials=c instanceof Array?c:[c];this.overdraw=this.doubleSided=this.flipSided=false;this.geometry.boundingSphere||this.geometry.computeBoundingSphere()};THREE.Mesh.prototype=new THREE.Object3D;THREE.Mesh.prototype.constructor=THREE.Mesh;THREE.FlatShading=0;THREE.SmoothShading=1;THREE.NormalBlending=0;THREE.AdditiveBlending=1;THREE.SubtractiveBlending=2;
THREE.LineBasicMaterial=function(a){this.color=new THREE.Color(16777215);this.opacity=1;this.blending=THREE.NormalBlending;this.linewidth=1;this.linejoin=this.linecap="round";if(a){a.color!==undefined&&this.color.setHex(a.color);if(a.opacity!==undefined)this.opacity=a.opacity;if(a.blending!==undefined)this.blending=a.blending;if(a.linewidth!==undefined)this.linewidth=a.linewidth;if(a.linecap!==undefined)this.linecap=a.linecap;if(a.linejoin!==undefined)this.linejoin=a.linejoin}};
THREE.LineBasicMaterial.prototype={toString:function(){return"THREE.LineBasicMaterial (<br/>color: "+this.color+"<br/>opacity: "+this.opacity+"<br/>blending: "+this.blending+"<br/>linewidth: "+this.linewidth+"<br/>linecap: "+this.linecap+"<br/>linejoin: "+this.linejoin+"<br/>)"}};
THREE.MeshBasicMaterial=function(a){this.id=THREE.MeshBasicMaterialCounter.value++;this.color=new THREE.Color(16777215);this.env_map=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refraction_ratio=0.98;this.fog=true;this.opacity=1;this.shading=THREE.SmoothShading;this.blending=THREE.NormalBlending;this.wireframe=false;this.wireframe_linewidth=1;this.wireframe_linejoin=this.wireframe_linecap="round";if(a){a.color!==undefined&&this.color.setHex(a.color);if(a.map!==undefined)this.map=
a.map;if(a.env_map!==undefined)this.env_map=a.env_map;if(a.combine!==undefined)this.combine=a.combine;if(a.reflectivity!==undefined)this.reflectivity=a.reflectivity;if(a.refraction_ratio!==undefined)this.refraction_ratio=a.refraction_ratio;if(a.fog!==undefined)this.fog=a.fog;if(a.opacity!==undefined)this.opacity=a.opacity;if(a.shading!==undefined)this.shading=a.shading;if(a.blending!==undefined)this.blending=a.blending;if(a.wireframe!==undefined)this.wireframe=a.wireframe;if(a.wireframe_linewidth!==
undefined)this.wireframe_linewidth=a.wireframe_linewidth;if(a.wireframe_linecap!==undefined)this.wireframe_linecap=a.wireframe_linecap;if(a.wireframe_linejoin!==undefined)this.wireframe_linejoin=a.wireframe_linejoin}};
THREE.MeshBasicMaterial.prototype={toString:function(){return"THREE.MeshBasicMaterial (<br/>id: "+this.id+"<br/>color: "+this.color+"<br/>map: "+this.map+"<br/>env_map: "+this.env_map+"<br/>combine: "+this.combine+"<br/>reflectivity: "+this.reflectivity+"<br/>refraction_ratio: "+this.refraction_ratio+"<br/>opacity: "+this.opacity+"<br/>blending: "+this.blending+"<br/>wireframe: "+this.wireframe+"<br/>wireframe_linewidth: "+this.wireframe_linewidth+"<br/>wireframe_linecap: "+this.wireframe_linecap+
"<br/>wireframe_linejoin: "+this.wireframe_linejoin+"<br/>)"}};THREE.MeshBasicMaterialCounter={value:0};
THREE.MeshLambertMaterial=function(a){this.id=THREE.MeshLambertMaterialCounter.value++;this.color=new THREE.Color(16777215);this.env_map=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refraction_ratio=0.98;this.fog=true;this.opacity=1;this.shading=THREE.SmoothShading;this.blending=THREE.NormalBlending;this.wireframe=false;this.wireframe_linewidth=1;this.wireframe_linejoin=this.wireframe_linecap="round";if(a){a.color!==undefined&&this.color.setHex(a.color);if(a.map!==undefined)this.map=
a.map;if(a.env_map!==undefined)this.env_map=a.env_map;if(a.combine!==undefined)this.combine=a.combine;if(a.reflectivity!==undefined)this.reflectivity=a.reflectivity;if(a.refraction_ratio!==undefined)this.refraction_ratio=a.refraction_ratio;if(a.fog!==undefined)this.fog=a.fog;if(a.opacity!==undefined)this.opacity=a.opacity;if(a.shading!==undefined)this.shading=a.shading;if(a.blending!==undefined)this.blending=a.blending;if(a.wireframe!==undefined)this.wireframe=a.wireframe;if(a.wireframe_linewidth!==
undefined)this.wireframe_linewidth=a.wireframe_linewidth;if(a.wireframe_linecap!==undefined)this.wireframe_linecap=a.wireframe_linecap;if(a.wireframe_linejoin!==undefined)this.wireframe_linejoin=a.wireframe_linejoin}};
THREE.MeshLambertMaterial.prototype={toString:function(){return"THREE.MeshLambertMaterial (<br/>id: "+this.id+"<br/>color: "+this.color+"<br/>map: "+this.map+"<br/>env_map: "+this.env_map+"<br/>combine: "+this.combine+"<br/>reflectivity: "+this.reflectivity+"<br/>refraction_ratio: "+this.refraction_ratio+"<br/>opacity: "+this.opacity+"<br/>shading: "+this.shading+"<br/>blending: "+this.blending+"<br/>wireframe: "+this.wireframe+"<br/>wireframe_linewidth: "+this.wireframe_linewidth+"<br/>wireframe_linecap: "+
this.wireframe_linecap+"<br/>wireframe_linejoin: "+this.wireframe_linejoin+"<br/> )"}};THREE.MeshLambertMaterialCounter={value:0};
THREE.MeshPhongMaterial=function(a){this.id=THREE.MeshPhongMaterialCounter.value++;this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(328965);this.specular=new THREE.Color(1118481);this.shininess=30;this.env_map=this.specular_map=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refraction_ratio=0.98;this.fog=true;this.opacity=1;this.shading=THREE.SmoothShading;this.blending=THREE.NormalBlending;this.wireframe=false;this.wireframe_linewidth=1;this.wireframe_linejoin=
this.wireframe_linecap="round";if(a){if(a.color!==undefined)this.color=new THREE.Color(a.color);if(a.ambient!==undefined)this.ambient=new THREE.Color(a.ambient);if(a.specular!==undefined)this.specular=new THREE.Color(a.specular);if(a.shininess!==undefined)this.shininess=a.shininess;if(a.map!==undefined)this.map=a.map;if(a.specular_map!==undefined)this.specular_map=a.specular_map;if(a.env_map!==undefined)this.env_map=a.env_map;if(a.combine!==undefined)this.combine=a.combine;if(a.reflectivity!==undefined)this.reflectivity=
a.reflectivity;if(a.refraction_ratio!==undefined)this.refraction_ratio=a.refraction_ratio;if(a.fog!==undefined)this.fog=a.fog;if(a.opacity!==undefined)this.opacity=a.opacity;if(a.shading!==undefined)this.shading=a.shading;if(a.blending!==undefined)this.blending=a.blending;if(a.wireframe!==undefined)this.wireframe=a.wireframe;if(a.wireframe_linewidth!==undefined)this.wireframe_linewidth=a.wireframe_linewidth;if(a.wireframe_linecap!==undefined)this.wireframe_linecap=a.wireframe_linecap;if(a.wireframe_linejoin!==
undefined)this.wireframe_linejoin=a.wireframe_linejoin}};
THREE.MeshPhongMaterial.prototype={toString:function(){return"THREE.MeshPhongMaterial (<br/>id: "+this.id+"<br/>color: "+this.color+"<br/>ambient: "+this.ambient+"<br/>specular: "+this.specular+"<br/>shininess: "+this.shininess+"<br/>map: "+this.map+"<br/>specular_map: "+this.specular_map+"<br/>env_map: "+this.env_map+"<br/>combine: "+this.combine+"<br/>reflectivity: "+this.reflectivity+"<br/>refraction_ratio: "+this.refraction_ratio+"<br/>opacity: "+this.opacity+"<br/>shading: "+this.shading+"<br/>wireframe: "+
this.wireframe+"<br/>wireframe_linewidth: "+this.wireframe_linewidth+"<br/>wireframe_linecap: "+this.wireframe_linecap+"<br/>wireframe_linejoin: "+this.wireframe_linejoin+"<br/>)"}};THREE.MeshPhongMaterialCounter={value:0};
THREE.MeshDepthMaterial=function(a){this.opacity=1;this.shading=THREE.SmoothShading;this.blending=THREE.NormalBlending;this.wireframe=false;this.wireframe_linewidth=1;this.wireframe_linejoin=this.wireframe_linecap="round";if(a){if(a.opacity!==undefined)this.opacity=a.opacity;if(a.blending!==undefined)this.blending=a.blending}};THREE.MeshDepthMaterial.prototype={toString:function(){return"THREE.MeshDepthMaterial"}};
THREE.MeshNormalMaterial=function(a){this.opacity=1;this.shading=THREE.FlatShading;this.blending=THREE.NormalBlending;if(a){if(a.opacity!==undefined)this.opacity=a.opacity;if(a.shading!==undefined)this.shading=a.shading;if(a.blending!==undefined)this.blending=a.blending}};THREE.MeshNormalMaterial.prototype={toString:function(){return"THREE.MeshNormalMaterial"}};THREE.MeshFaceMaterial=function(){};THREE.MeshFaceMaterial.prototype={toString:function(){return"THREE.MeshFaceMaterial"}};
THREE.MeshShaderMaterial=function(a){this.id=THREE.MeshShaderMaterialCounter.value++;this.vertex_shader=this.fragment_shader="void main() {}";this.uniforms={};this.opacity=1;this.shading=THREE.SmoothShading;this.blending=THREE.NormalBlending;this.wireframe=false;this.wireframe_linewidth=1;this.wireframe_linejoin=this.wireframe_linecap="round";if(a){if(a.fragment_shader!==undefined)this.fragment_shader=a.fragment_shader;if(a.vertex_shader!==undefined)this.vertex_shader=a.vertex_shader;if(a.uniforms!==
undefined)this.uniforms=a.uniforms;if(a.shading!==undefined)this.shading=a.shading;if(a.blending!==undefined)this.blending=a.blending;if(a.wireframe!==undefined)this.wireframe=a.wireframe;if(a.wireframe_linewidth!==undefined)this.wireframe_linewidth=a.wireframe_linewidth;if(a.wireframe_linecap!==undefined)this.wireframe_linecap=a.wireframe_linecap;if(a.wireframe_linejoin!==undefined)this.wireframe_linejoin=a.wireframe_linejoin}};
THREE.MeshShaderMaterial.prototype={toString:function(){return"THREE.MeshShaderMaterial (<br/>id: "+this.id+"<br/>blending: "+this.blending+"<br/>wireframe: "+this.wireframe+"<br/>wireframe_linewidth: "+this.wireframe_linewidth+"<br/>wireframe_linecap: "+this.wireframe_linecap+"<br/>wireframe_linejoin: "+this.wireframe_linejoin+"<br/>)"}};THREE.MeshShaderMaterialCounter={value:0};
THREE.ParticleBasicMaterial=function(a){this.color=new THREE.Color(16777215);this.map=null;this.opacity=1;this.blending=THREE.NormalBlending;this.offset=new THREE.Vector2;if(a){a.color!==undefined&&this.color.setHex(a.color);if(a.map!==undefined)this.map=a.map;if(a.opacity!==undefined)this.opacity=a.opacity;if(a.blending!==undefined)this.blending=a.blending}};
THREE.ParticleBasicMaterial.prototype={toString:function(){return"THREE.ParticleBasicMaterial (<br/>color: "+this.color+"<br/>map: "+this.map+"<br/>opacity: "+this.opacity+"<br/>blending: "+this.blending+"<br/>)"}};THREE.ParticleCircleMaterial=function(a){this.color=new THREE.Color(16777215);this.opacity=1;this.blending=THREE.NormalBlending;if(a){a.color!==undefined&&this.color.setHex(a.color);if(a.opacity!==undefined)this.opacity=a.opacity;if(a.blending!==undefined)this.blending=a.blending}};
THREE.ParticleCircleMaterial.prototype={toString:function(){return"THREE.ParticleCircleMaterial (<br/>color: "+this.color+"<br/>opacity: "+this.opacity+"<br/>blending: "+this.blending+"<br/>)"}};THREE.Texture=function(a,c,f,e,h,l){this.image=a;this.mapping=c!==undefined?c:new THREE.UVMapping;this.wrap_s=f!==undefined?f:THREE.ClampToEdgeWrapping;this.wrap_t=e!==undefined?e:THREE.ClampToEdgeWrapping;this.mag_filter=h!==undefined?h:THREE.LinearFilter;this.min_filter=l!==undefined?l:THREE.LinearMipMapLinearFilter};
THREE.Texture.prototype={clone:function(){return new THREE.Texture(this.image,this.mapping,this.wrap_s,this.wrap_t,this.mag_filter,this.min_filter)},toString:function(){return"THREE.Texture (<br/>image: "+this.image+"<br/>wrap_s: "+this.wrap_s+"<br/>wrap_t: "+this.wrap_t+"<br/>mag_filter: "+this.mag_filter+"<br/>min_filter: "+this.min_filter+"<br/>)"}};THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.RepeatWrapping=0;THREE.ClampToEdgeWrapping=1;THREE.MirroredRepeatWrapping=2;
THREE.NearestFilter=3;THREE.NearestMipMapNearestFilter=4;THREE.NearestMipMapLinearFilter=5;THREE.LinearFilter=6;THREE.LinearMipMapNearestFilter=7;THREE.LinearMipMapLinearFilter=8;var Uniforms={clone:function(a){var c,f,e,h={};for(c in a){h[c]={};for(f in a[c]){e=a[c][f];h[c][f]=e instanceof THREE.Color||e instanceof THREE.Vector3||e instanceof THREE.Texture?e.clone():e}}return h},merge:function(a){var c,f,e,h={};for(c=0;c<a.length;c++){e=this.clone(a[c]);for(f in e)h[f]=e[f]}return h}};
THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.LatitudeReflectionMapping=function(){};THREE.LatitudeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.UVMapping=function(){};
THREE.Scene=function(){this.objects=[];this.lights=[];this.fog=null;this.addObject=function(a){this.objects.indexOf(a)===-1&&this.objects.push(a)};this.removeObject=function(a){a=this.objects.indexOf(a);a!==-1&&this.objects.splice(a,1)};this.addLight=function(a){this.lights.indexOf(a)===-1&&this.lights.push(a)};this.removeLight=function(a){a=this.lights.indexOf(a);a!==-1&&this.lights.splice(a,1)};this.toString=function(){return"THREE.Scene ( "+this.objects+" )"}};
THREE.Fog=function(a,c,f){this.color=new THREE.Color(a);this.near=c||1;this.far=f||1E3};THREE.FogExp2=function(a,c){this.color=new THREE.Color(a);this.density=c||2.5E-4};
THREE.WebGLRenderer=function(a){function c(j,i){j.fragment_shader=i.fragment_shader;j.vertex_shader=i.vertex_shader;j.uniforms=Uniforms.clone(i.uniforms)}function f(j,i){j.uniforms.color.value.setRGB(j.color.r*j.opacity,j.color.g*j.opacity,j.color.b*j.opacity);j.uniforms.opacity.value=j.opacity;j.uniforms.map.texture=j.map;j.uniforms.env_map.texture=j.env_map;j.uniforms.reflectivity.value=j.reflectivity;j.uniforms.refraction_ratio.value=j.refraction_ratio;j.uniforms.combine.value=j.combine;j.uniforms.useRefract.value=
j.env_map&&j.env_map.mapping instanceof THREE.CubeRefractionMapping;if(i){j.uniforms.fogColor.value.setHex(i.color.hex);if(i instanceof THREE.Fog){j.uniforms.fogNear.value=i.near;j.uniforms.fogFar.value=i.far}else if(i instanceof THREE.FogExp2)j.uniforms.fogDensity.value=i.density}}function e(j,i){var r;if(j=="fragment")r=d.createShader(d.FRAGMENT_SHADER);else if(j=="vertex")r=d.createShader(d.VERTEX_SHADER);d.shaderSource(r,i);d.compileShader(r);if(!d.getShaderParameter(r,d.COMPILE_STATUS)){alert(d.getShaderInfoLog(r));
return null}return r}function h(j){switch(j){case THREE.RepeatWrapping:return d.REPEAT;case THREE.ClampToEdgeWrapping:return d.CLAMP_TO_EDGE;case THREE.MirroredRepeatWrapping:return d.MIRRORED_REPEAT;case THREE.NearestFilter:return d.NEAREST;case THREE.NearestMipMapNearestFilter:return d.NEAREST_MIPMAP_NEAREST;case THREE.NearestMipMapLinearFilter:return d.NEAREST_MIPMAP_LINEAR;case THREE.LinearFilter:return d.LINEAR;case THREE.LinearMipMapNearestFilter:return d.LINEAR_MIPMAP_NEAREST;case THREE.LinearMipMapLinearFilter:return d.LINEAR_MIPMAP_LINEAR}return 0}
var l=document.createElement("canvas"),d,m=null,k=new THREE.Matrix4,q,s=new Float32Array(16),A=new Float32Array(16),t=new Float32Array(16),w=new Float32Array(9),y=new Float32Array(16),x=true,H=new THREE.Color(0),G=0;if(a){if(a.antialias!==undefined)x=a.antialias;a.clearColor!==undefined&&H.setHex(a.clearColor);if(a.clearAlpha!==undefined)G=a.clearAlpha}this.domElement=l;this.autoClear=true;(function(j,i,r){try{d=l.getContext("experimental-webgl",{antialias:j})}catch(n){}if(!d){alert("WebGL not supported");
throw"cannot create webgl context";}d.clearColor(0,0,0,1);d.clearDepth(1);d.enable(d.DEPTH_TEST);d.depthFunc(d.LEQUAL);d.frontFace(d.CCW);d.cullFace(d.BACK);d.enable(d.CULL_FACE);d.enable(d.BLEND);d.blendFunc(d.ONE,d.ONE_MINUS_SRC_ALPHA);d.clearColor(i.r,i.g,i.b,r)})(x,H,G);this.setSize=function(j,i){l.width=j;l.height=i;d.viewport(0,0,l.width,l.height)};this.setClearColor=function(j,i){var r=new THREE.Color(j);d.clearColor(r.r,r.g,r.b,i)};this.clear=function(){d.clear(d.COLOR_BUFFER_BIT|d.DEPTH_BUFFER_BIT)};
this.setupLights=function(j,i){var r,n,v,p=g=b=0,u=[],B=[],C=[],D=[];r=0;for(n=i.length;r<n;r++){v=i[r];if(v instanceof THREE.AmbientLight){p+=v.color.r;g+=v.color.g;b+=v.color.b}else if(v instanceof THREE.DirectionalLight){u.push(v.color.r*v.intensity,v.color.g*v.intensity,v.color.b*v.intensity);B.push(v.position.x,v.position.y,v.position.z)}else if(v instanceof THREE.PointLight){C.push(v.color.r*v.intensity,v.color.g*v.intensity,v.color.b*v.intensity);D.push(v.position.x,v.position.y,v.position.z)}}return{ambient:[p,
g,b],directional:{colors:u,positions:B},point:{colors:C,positions:D}}};this.createBuffers=function(j,i){var r,n,v,p,u,B,C,D,F,J,M=[],N=[],P=[],Q=[],T=[],S=[],L=0,O=j.geometry.geometryChunks[i],U;u=false;r=0;for(n=j.materials.length;r<n;r++){B=j.materials[r];if(B instanceof THREE.MeshFaceMaterial){B=0;for(U=O.materials.length;B<U;B++)if(O.materials[B]&&O.materials[B].shading!=undefined&&O.materials[B].shading==THREE.SmoothShading){u=true;break}}else if(B&&B.shading!=undefined&&B.shading==THREE.SmoothShading){u=
true;break}if(u)break}U=u;r=0;for(n=O.faces.length;r<n;r++){v=O.faces[r];p=j.geometry.faces[v];u=p.vertexNormals;B=p.normal;v=j.geometry.uvs[v];if(p instanceof THREE.Face3){C=j.geometry.vertices[p.a].position;D=j.geometry.vertices[p.b].position;F=j.geometry.vertices[p.c].position;P.push(C.x,C.y,C.z,D.x,D.y,D.z,F.x,F.y,F.z);if(j.geometry.hasTangents){C=j.geometry.vertices[p.a].tangent;D=j.geometry.vertices[p.b].tangent;F=j.geometry.vertices[p.c].tangent;T.push(C.x,C.y,C.z,C.w,D.x,D.y,D.z,D.w,F.x,F.y,
F.z,F.w)}if(u.length==3&&U)for(p=0;p<3;p++)Q.push(u[p].x,u[p].y,u[p].z);else for(p=0;p<3;p++)Q.push(B.x,B.y,B.z);if(v)for(p=0;p<3;p++)S.push(v[p].u,v[p].v);M.push(L,L+1,L+2);N.push(L,L+1,L,L+2,L+1,L+2);L+=3}else if(p instanceof THREE.Face4){C=j.geometry.vertices[p.a].position;D=j.geometry.vertices[p.b].position;F=j.geometry.vertices[p.c].position;J=j.geometry.vertices[p.d].position;P.push(C.x,C.y,C.z,D.x,D.y,D.z,F.x,F.y,F.z,J.x,J.y,J.z);if(j.geometry.hasTangents){C=j.geometry.vertices[p.a].tangent;
D=j.geometry.vertices[p.b].tangent;F=j.geometry.vertices[p.c].tangent;p=j.geometry.vertices[p.d].tangent;T.push(C.x,C.y,C.z,C.w,D.x,D.y,D.z,D.w,F.x,F.y,F.z,F.w,p.x,p.y,p.z,p.w)}if(u.length==4&&U)for(p=0;p<4;p++)Q.push(u[p].x,u[p].y,u[p].z);else for(p=0;p<4;p++)Q.push(B.x,B.y,B.z);if(v)for(p=0;p<4;p++)S.push(v[p].u,v[p].v);M.push(L,L+1,L+2,L,L+2,L+3);N.push(L,L+1,L,L+2,L,L+3,L+1,L+2,L+2,L+3);L+=4}}if(P.length){O.__webGLVertexBuffer=d.createBuffer();d.bindBuffer(d.ARRAY_BUFFER,O.__webGLVertexBuffer);
d.bufferData(d.ARRAY_BUFFER,new Float32Array(P),d.STATIC_DRAW);O.__webGLNormalBuffer=d.createBuffer();d.bindBuffer(d.ARRAY_BUFFER,O.__webGLNormalBuffer);d.bufferData(d.ARRAY_BUFFER,new Float32Array(Q),d.STATIC_DRAW);if(j.geometry.hasTangents){O.__webGLTangentBuffer=d.createBuffer();d.bindBuffer(d.ARRAY_BUFFER,O.__webGLTangentBuffer);d.bufferData(d.ARRAY_BUFFER,new Float32Array(T),d.STATIC_DRAW)}if(S.length>0){O.__webGLUVBuffer=d.createBuffer();d.bindBuffer(d.ARRAY_BUFFER,O.__webGLUVBuffer);d.bufferData(d.ARRAY_BUFFER,
new Float32Array(S),d.STATIC_DRAW)}O.__webGLFaceBuffer=d.createBuffer();d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,O.__webGLFaceBuffer);d.bufferData(d.ELEMENT_ARRAY_BUFFER,new Uint16Array(M),d.STATIC_DRAW);O.__webGLLineBuffer=d.createBuffer();d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,O.__webGLLineBuffer);d.bufferData(d.ELEMENT_ARRAY_BUFFER,new Uint16Array(N),d.STATIC_DRAW);O.__webGLFaceCount=M.length;O.__webGLLineCount=N.length}};this.renderBuffer=function(j,i,r,n,v){var p,u,B,C;if(!n.program){if(n instanceof
THREE.MeshDepthMaterial){c(n,THREE.ShaderLib.depth);n.uniforms.mNear.value=j.near;n.uniforms.mFar.value=j.far}else if(n instanceof THREE.MeshNormalMaterial)c(n,THREE.ShaderLib.normal);else if(n instanceof THREE.MeshBasicMaterial){c(n,THREE.ShaderLib.basic);f(n,r)}else if(n instanceof THREE.MeshLambertMaterial){c(n,THREE.ShaderLib.lambert);f(n,r)}else if(n instanceof THREE.MeshPhongMaterial){c(n,THREE.ShaderLib.phong);f(n,r)}if(scene){var D,F,J;D=C=u=0;for(F=i.length;D<F;D++){J=i[D];J instanceof THREE.DirectionalLight&&
C++;J instanceof THREE.PointLight&&u++}if(u+C<=4){D=C;u=u}else{D=Math.ceil(4*C/(u+C));u=4-D}u={directional:D,point:u}}else u={directional:1,point:3};C={fog:r,map:n.map,env_map:n.env_map,maxDirLights:u.directional,maxPointLights:u.point};u=n.fragment_shader;D=n.vertex_shader;F=d.createProgram();J=["#ifdef GL_ES\nprecision highp float;\n#endif","#define MAX_DIR_LIGHTS "+C.maxDirLights,"#define MAX_POINT_LIGHTS "+C.maxPointLights,C.fog?"#define USE_FOG":"",C.fog instanceof THREE.FogExp2?"#define FOG_EXP2":
"",C.map?"#define USE_MAP":"",C.env_map?"#define USE_ENVMAP":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");C=[d.getParameter(d.MAX_VERTEX_TEXTURE_IMAGE_UNITS)>0?"#define VERTEX_TEXTURES":"","#define MAX_DIR_LIGHTS "+C.maxDirLights,"#define MAX_POINT_LIGHTS "+C.maxPointLights,C.map?"#define USE_MAP":"",C.env_map?"#define USE_ENVMAP":"","uniform mat4 objectMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n"].join("\n");
d.attachShader(F,e("fragment",J+u));d.attachShader(F,e("vertex",C+D));d.linkProgram(F);d.getProgramParameter(F,d.LINK_STATUS)||alert("Could not initialise shaders\nVALIDATE_STATUS: "+d.getProgramParameter(F,d.VALIDATE_STATUS)+", gl error ["+d.getError()+"]");F.uniforms={};F.attributes={};n.program=F;u=["viewMatrix","modelViewMatrix","projectionMatrix","normalMatrix","objectMatrix","cameraPosition"];for(p in n.uniforms)u.push(p);p=n.program;D=0;for(F=u.length;D<F;D++){J=u[D];p.uniforms[J]=d.getUniformLocation(p,
J)}p=n.program;u=["position","normal","uv","tangent"];D=0;for(F=u.length;D<F;D++){J=u[D];p.attributes[J]=d.getAttribLocation(p,J)}}p=n.program;if(p!=m){d.useProgram(p);m=p}this.loadCamera(p,j);this.loadMatrices(p);if(n instanceof THREE.MeshPhongMaterial||n instanceof THREE.MeshLambertMaterial){j=this.setupLights(p,i);n.uniforms.enableLighting.value=j.directional.positions.length+j.point.positions.length;n.uniforms.ambientLightColor.value=j.ambient;n.uniforms.directionalLightColor.value=j.directional.colors;
n.uniforms.directionalLightDirection.value=j.directional.positions;n.uniforms.pointLightColor.value=j.point.colors;n.uniforms.pointLightPosition.value=j.point.positions}if(n instanceof THREE.MeshBasicMaterial||n instanceof THREE.MeshLambertMaterial||n instanceof THREE.MeshPhongMaterial)f(n,r);if(n instanceof THREE.MeshPhongMaterial){n.uniforms.ambient.value.setRGB(n.ambient.r,n.ambient.g,n.ambient.b);n.uniforms.specular.value.setRGB(n.specular.r,n.specular.g,n.specular.b);n.uniforms.shininess.value=
n.shininess}r=n.uniforms;for(B in r){i=r[B].type;j=r[B].value;u=p.uniforms[B];if(i=="i")d.uniform1i(u,j);else if(i=="f")d.uniform1f(u,j);else if(i=="fv")d.uniform3fv(u,j);else if(i=="v2")d.uniform2f(u,j.x,j.y);else if(i=="v3")d.uniform3f(u,j.x,j.y,j.z);else if(i=="c")d.uniform3f(u,j.r,j.g,j.b);else if(i=="t"){d.uniform1i(u,j);if(i=r[B].texture)if(i.image instanceof Array&&i.image.length==6){i=i;j=j;if(i.image.length==6){if(!i.image.__webGLTextureCube&&!i.image.__cubeMapInitialized&&i.image.loadCount==
6){i.image.__webGLTextureCube=d.createTexture();d.bindTexture(d.TEXTURE_CUBE_MAP,i.image.__webGLTextureCube);d.texParameteri(d.TEXTURE_CUBE_MAP,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE);d.texParameteri(d.TEXTURE_CUBE_MAP,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE);d.texParameteri(d.TEXTURE_CUBE_MAP,d.TEXTURE_MAG_FILTER,d.LINEAR);d.texParameteri(d.TEXTURE_CUBE_MAP,d.TEXTURE_MIN_FILTER,d.LINEAR_MIPMAP_LINEAR);for(u=0;u<6;++u)d.texImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X+u,0,d.RGBA,d.RGBA,d.UNSIGNED_BYTE,i.image[u]);d.generateMipmap(d.TEXTURE_CUBE_MAP);
d.bindTexture(d.TEXTURE_CUBE_MAP,null);i.image.__cubeMapInitialized=true}d.activeTexture(d.TEXTURE0+j);d.bindTexture(d.TEXTURE_CUBE_MAP,i.image.__webGLTextureCube)}}else{i=i;j=j;if(!i.__webGLTexture&&i.image.loaded){i.__webGLTexture=d.createTexture();d.bindTexture(d.TEXTURE_2D,i.__webGLTexture);d.texImage2D(d.TEXTURE_2D,0,d.RGBA,d.RGBA,d.UNSIGNED_BYTE,i.image);d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,h(i.wrap_s));d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,h(i.wrap_t));d.texParameteri(d.TEXTURE_2D,
d.TEXTURE_MAG_FILTER,h(i.mag_filter));d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,h(i.min_filter));d.generateMipmap(d.TEXTURE_2D);d.bindTexture(d.TEXTURE_2D,null)}d.activeTexture(d.TEXTURE0+j);d.bindTexture(d.TEXTURE_2D,i.__webGLTexture)}}}B=p.attributes;d.bindBuffer(d.ARRAY_BUFFER,v.__webGLVertexBuffer);d.vertexAttribPointer(B.position,3,d.FLOAT,false,0,0);d.enableVertexAttribArray(B.position);if(B.normal>=0){d.bindBuffer(d.ARRAY_BUFFER,v.__webGLNormalBuffer);d.vertexAttribPointer(B.normal,
3,d.FLOAT,false,0,0);d.enableVertexAttribArray(B.normal)}if(B.tangent>=0){d.bindBuffer(d.ARRAY_BUFFER,v.__webGLTangentBuffer);d.vertexAttribPointer(B.tangent,4,d.FLOAT,false,0,0);d.enableVertexAttribArray(B.tangent)}if(B.uv>=0)if(v.__webGLUVBuffer){d.bindBuffer(d.ARRAY_BUFFER,v.__webGLUVBuffer);d.vertexAttribPointer(B.uv,2,d.FLOAT,false,0,0);d.enableVertexAttribArray(B.uv)}else d.disableVertexAttribArray(B.uv);if(n.wireframe){d.lineWidth(n.wireframe_linewidth);d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,
v.__webGLLineBuffer);d.drawElements(d.LINES,v.__webGLLineCount,d.UNSIGNED_SHORT,0)}else{d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,v.__webGLFaceBuffer);d.drawElements(d.TRIANGLES,v.__webGLFaceCount,d.UNSIGNED_SHORT,0)}};this.renderPass=function(j,i,r,n,v,p,u){var B,C,D,F,J;D=0;for(F=n.materials.length;D<F;D++){B=n.materials[D];if(B instanceof THREE.MeshFaceMaterial){B=0;for(C=v.materials.length;B<C;B++)if((J=v.materials[B])&&J.blending==p&&J.opacity<1==u){this.setBlending(J.blending);this.renderBuffer(j,
i,r,J,v)}}else if((J=B)&&J.blending==p&&J.opacity<1==u){this.setBlending(J.blending);this.renderBuffer(j,i,r,J,v)}}};this.render=function(j,i){var r,n,v,p,u=j.lights,B=j.fog;this.initWebGLObjects(j);this.autoClear&&this.clear();i.autoUpdateMatrix&&i.updateMatrix();s.set(i.matrix.flatten());t.set(i.projectionMatrix.flatten());r=0;for(n=j.__webGLObjects.length;r<n;r++){v=j.__webGLObjects[r];p=v.object;v=v.buffer;if(p.visible){this.setupMatrices(p,i);this.renderPass(i,u,B,p,v,THREE.NormalBlending,false)}}r=
0;for(n=j.__webGLObjects.length;r<n;r++){v=j.__webGLObjects[r];p=v.object;v=v.buffer;if(p.visible){this.setupMatrices(p,i);this.renderPass(i,u,B,p,v,THREE.AdditiveBlending,false);this.renderPass(i,u,B,p,v,THREE.SubtractiveBlending,false);this.renderPass(i,u,B,p,v,THREE.AdditiveBlending,true);this.renderPass(i,u,B,p,v,THREE.SubtractiveBlending,true);this.renderPass(i,u,B,p,v,THREE.NormalBlending,true)}}};this.initWebGLObjects=function(j){var i,r,n,v,p,u;if(!j.__webGLObjects){j.__webGLObjects=[];j.__webGLObjectsMap=
{}}i=0;for(r=j.objects.length;i<r;i++){n=j.objects[i];if(j.__webGLObjectsMap[n.id]==undefined)j.__webGLObjectsMap[n.id]={};u=j.__webGLObjectsMap[n.id];if(n instanceof THREE.Mesh)for(p in n.geometry.geometryChunks){v=n.geometry.geometryChunks[p];v.__webGLVertexBuffer||this.createBuffers(n,p);if(u[p]==undefined){v={buffer:v,object:n};j.__webGLObjects.push(v);u[p]=1}}}};this.removeObject=function(j,i){var r,n;for(r=j.__webGLObjects.length-1;r>=0;r--){n=j.__webGLObjects[r].object;i==n&&j.__webGLObjects.splice(r,
1)}};this.setupMatrices=function(j,i){j.autoUpdateMatrix&&j.updateMatrix();k.multiply(i.matrix,j.matrix);A.set(k.flatten());q=THREE.Matrix4.makeInvert3x3(k).transpose();w.set(q.m);y.set(j.matrix.flatten())};this.loadMatrices=function(j){d.uniformMatrix4fv(j.uniforms.viewMatrix,false,s);d.uniformMatrix4fv(j.uniforms.modelViewMatrix,false,A);d.uniformMatrix4fv(j.uniforms.projectionMatrix,false,t);d.uniformMatrix3fv(j.uniforms.normalMatrix,false,w);d.uniformMatrix4fv(j.uniforms.objectMatrix,false,y)};
this.loadCamera=function(j,i){d.uniform3f(j.uniforms.cameraPosition,i.position.x,i.position.y,i.position.z)};this.setBlending=function(j){switch(j){case THREE.AdditiveBlending:d.blendEquation(d.FUNC_ADD);d.blendFunc(d.ONE,d.ONE);break;case THREE.SubtractiveBlending:d.blendFunc(d.DST_COLOR,d.ZERO);break;default:d.blendEquation(d.FUNC_ADD);d.blendFunc(d.ONE,d.ONE_MINUS_SRC_ALPHA)}};this.setFaceCulling=function(j,i){if(j){!i||i=="ccw"?d.frontFace(d.CCW):d.frontFace(d.CW);if(j=="back")d.cullFace(d.BACK);
else j=="front"?d.cullFace(d.FRONT):d.cullFace(d.FRONT_AND_BACK);d.enable(d.CULL_FACE)}else d.disable(d.CULL_FACE)};this.supportsVertexTextures=function(){return d.getParameter(d.MAX_VERTEX_TEXTURE_IMAGE_UNITS)>0}};
THREE.Snippets={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, 1.0 ), fogFactor );\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float reflectivity;\nuniform samplerCube env_map;\nuniform int combine;\n#endif",
envmap_fragment:"#ifdef USE_ENVMAP\ncubeColor = textureCube( env_map, vec3( -vReflect.x, vReflect.yz ) );\nif ( combine == 1 ) {\ngl_FragColor = mix( gl_FragColor, cubeColor, reflectivity );\n} else {\ngl_FragColor = gl_FragColor * cubeColor;\n}\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float refraction_ratio;\nuniform bool useRefract;\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = mat3( objectMatrix[0].xyz, objectMatrix[1].xyz, objectMatrix[2].xyz ) * normal;\nif ( useRefract ) {\nvReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refraction_ratio );\n} else {\nvReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );\n}\n#endif",
map_pars_fragment:"#ifdef USE_MAP\nvarying vec2 vUv;\nuniform sampler2D map;\n#endif",map_pars_vertex:"#ifdef USE_MAP\nvarying vec2 vUv;\n#endif",map_fragment:"#ifdef USE_MAP\nmapColor = texture2D( map, vUv );\n#endif",map_vertex:"#ifdef USE_MAP\nvUv = uv;\n#endif",lights_pars_vertex:"uniform bool enableLighting;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n#ifdef PHONG\nvarying vec3 vPointLightVector[ MAX_POINT_LIGHTS ];\n#endif\n#endif",
lights_vertex:"if ( !enableLighting ) {\nvLightWeighting = vec3( 1.0 );\n} else {\nvLightWeighting = ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nfloat directionalLightWeighting = max( dot( transformedNormal, normalize( lDirection.xyz ) ), 0.0 );\nvLightWeighting += directionalLightColor[ i ] * directionalLightWeighting;\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointLightVector = normalize( lPosition.xyz - mvPosition.xyz );\nfloat pointLightWeighting = max( dot( transformedNormal, pointLightVector ), 0.0 );\nvLightWeighting += pointLightColor[ i ] * pointLightWeighting;\n#ifdef PHONG\nvPointLightVector[ i ] = pointLightVector;\n#endif\n}\n#endif\n}",
lights_pars_fragment:"#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nvarying vec3 vPointLightVector[ MAX_POINT_LIGHTS ];\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",lights_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\nvec4 mSpecular = vec4( specular, opacity );\n#if MAX_POINT_LIGHTS > 0\nvec4 pointDiffuse  = vec4( 0.0 );\nvec4 pointSpecular = vec4( 0.0 );\nfor( int i = 0; i < MAX_POINT_LIGHTS; i++ ) {\nvec3 pointVector = normalize( vPointLightVector[ i ] );\nvec3 pointHalfVector = normalize( vPointLightVector[ i ] + vViewPosition );\nfloat pointDotNormalHalf = dot( normal, pointHalfVector );\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\nfloat pointSpecularWeight = 0.0;\nif ( pointDotNormalHalf >= 0.0 )\npointSpecularWeight = pow( pointDotNormalHalf, shininess );\npointDiffuse  += mColor * pointDiffuseWeight;\npointSpecular += mSpecular * pointSpecularWeight;\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec4 dirDiffuse  = vec4( 0.0 );\nvec4 dirSpecular = vec4( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nvec3 dirHalfVector = normalize( lDirection.xyz + vViewPosition );\nfloat dirDotNormalHalf = dot( normal, dirHalfVector );\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\nfloat dirSpecularWeight = 0.0;\nif ( dirDotNormalHalf >= 0.0 )\ndirSpecularWeight = pow( dirDotNormalHalf, shininess );\ndirDiffuse  += mColor * dirDiffuseWeight;\ndirSpecular += mSpecular * dirSpecularWeight;\n}\n#endif\nvec4 totalLight = vec4( ambient, opacity );\n#if MAX_DIR_LIGHTS > 0\ntotalLight += dirDiffuse + dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalLight += pointDiffuse + pointSpecular;\n#endif"};
THREE.UniformsLib={common:{color:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:0,texture:null},env_map:{type:"t",value:1,texture:null},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refraction_ratio:{type:"f",value:0.98},combine:{type:"i",value:0},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{enableLighting:{type:"i",value:1},ambientLightColor:{type:"fv",
value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]}}};
THREE.ShaderLib={depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3}},fragment_shader:"uniform float mNear;\nuniform float mFar;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), 1.0 );\n}",vertex_shader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"},normal:{uniforms:{},fragment_shader:"varying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, 1.0 );\n}",
vertex_shader:"varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\ngl_Position = projectionMatrix * mvPosition;\n}"},basic:{uniforms:THREE.UniformsLib.common,fragment_shader:["uniform vec3 color;\nuniform float opacity;",THREE.Snippets.map_pars_fragment,THREE.Snippets.envmap_pars_fragment,THREE.Snippets.fog_pars_fragment,"void main() {\nvec4 mColor = vec4( color, opacity );\nvec4 mapColor = vec4( 1.0 );\nvec4 cubeColor = vec4( 1.0 );",
THREE.Snippets.map_fragment,"gl_FragColor = mColor * mapColor;",THREE.Snippets.envmap_fragment,THREE.Snippets.fog_fragment,"}"].join("\n"),vertex_shader:[THREE.Snippets.map_pars_vertex,THREE.Snippets.envmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.Snippets.map_vertex,THREE.Snippets.envmap_vertex,"gl_Position = projectionMatrix * mvPosition;\n}"].join("\n")},lambert:{uniforms:Uniforms.merge([THREE.UniformsLib.common,THREE.UniformsLib.lights]),fragment_shader:["uniform vec3 color;\nuniform float opacity;\nvarying vec3 vLightWeighting;",
THREE.Snippets.map_pars_fragment,THREE.Snippets.envmap_pars_fragment,THREE.Snippets.fog_pars_fragment,"void main() {\nvec4 mColor = vec4( color, opacity );\nvec4 mapColor = vec4( 1.0 );\nvec4 cubeColor = vec4( 1.0 );",THREE.Snippets.map_fragment,"gl_FragColor =  mColor * mapColor * vec4( vLightWeighting, 1.0 );",THREE.Snippets.envmap_fragment,THREE.Snippets.fog_fragment,"}"].join("\n"),vertex_shader:["varying vec3 vLightWeighting;",THREE.Snippets.map_pars_vertex,THREE.Snippets.envmap_pars_vertex,
THREE.Snippets.lights_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.Snippets.map_vertex,THREE.Snippets.envmap_vertex,"vec3 transformedNormal = normalize( normalMatrix * normal );",THREE.Snippets.lights_vertex,"gl_Position = projectionMatrix * mvPosition;\n}"].join("\n")},phong:{uniforms:Uniforms.merge([THREE.UniformsLib.common,THREE.UniformsLib.lights,{ambient:{type:"c",value:new THREE.Color(328965)},specular:{type:"c",value:new THREE.Color(1118481)},
shininess:{type:"f",value:30}}]),fragment_shader:["uniform vec3 color;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 specular;\nuniform float shininess;\nvarying vec3 vLightWeighting;",THREE.Snippets.map_pars_fragment,THREE.Snippets.envmap_pars_fragment,THREE.Snippets.fog_pars_fragment,THREE.Snippets.lights_pars_fragment,"void main() {\nvec4 mColor = vec4( color, opacity );\nvec4 mapColor = vec4( 1.0 );\nvec4 cubeColor = vec4( 1.0 );",THREE.Snippets.map_fragment,THREE.Snippets.lights_fragment,
"gl_FragColor =  mapColor * totalLight * vec4( vLightWeighting, 1.0 );",THREE.Snippets.envmap_fragment,THREE.Snippets.fog_fragment,"}"].join("\n"),vertex_shader:["#define PHONG\nvarying vec3 vLightWeighting;\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.Snippets.map_pars_vertex,THREE.Snippets.envmap_pars_vertex,THREE.Snippets.lights_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.Snippets.map_vertex,THREE.Snippets.envmap_vertex,"#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif\nvViewPosition = cameraPosition - mPosition.xyz;\nvec3 transformedNormal = normalize( normalMatrix * normal );\nvNormal = transformedNormal;",
THREE.Snippets.lights_vertex,"gl_Position = projectionMatrix * mvPosition;\n}"].join("\n")}};
var GeometryUtils={merge:function(a,c){var f=c instanceof THREE.Mesh,e=a.vertices.length,h=f?c.geometry:c,l=a.vertices,d=h.vertices,m=a.faces,k=h.faces,q=a.uvs;h=h.uvs;f&&c.updateMatrix();for(var s=0,A=d.length;s<A;s++){var t=new THREE.Vertex(d[s].position.clone());f&&c.matrix.multiplyVector3(t.position);l.push(t)}s=0;for(A=k.length;s<A;s++){d=k[s];var w,y=d.vertexNormals;if(d instanceof THREE.Face3)w=new THREE.Face3(d.a+e,d.b+e,d.c+e);else if(d instanceof THREE.Face4)w=new THREE.Face4(d.a+e,d.b+
e,d.c+e,d.d+e);w.centroid.copy(d.centroid);w.normal.copy(d.normal);f=0;for(l=y.length;f<l;f++){t=y[f];w.vertexNormals.push(t.clone())}w.materials=d.materials.slice();m.push(w)}s=0;for(A=h.length;s<A;s++){e=h[s];m=[];f=0;for(l=e.length;f<l;f++)m.push(new THREE.UV(e[f].u,e[f].v));q.push(m)}}},ImageUtils={loadTexture:function(a,c){var f=new Image;f.onload=function(){this.loaded=true};f.src=a;return new THREE.Texture(f,c)},loadArray:function(a){var c,f,e=[];c=e.loadCount=0;for(f=a.length;c<f;++c){e[c]=
new Image;e[c].loaded=0;e[c].onload=function(){e.loadCount+=1;this.loaded=true};e[c].src=a[c]}return e}},SceneUtils={addMesh:function(a,c,f,e,h,l,d,m,k,q){c=new THREE.Mesh(c,q);c.scale.x=c.scale.y=c.scale.z=f;c.position.x=e;c.position.y=h;c.position.z=l;c.rotation.x=d;c.rotation.y=m;c.rotation.z=k;a.addObject(c);return c},addPanoramaCubeWebGL:function(a,c,f){var e=ShaderUtils.lib.cube;e.uniforms.tCube.texture=f;f=new THREE.MeshShaderMaterial({fragment_shader:e.fragment_shader,vertex_shader:e.vertex_shader,
uniforms:e.uniforms});c=new THREE.Mesh(new Cube(c,c,c,1,1,null,true),f);a.addObject(c);return c},addPanoramaCube:function(a,c,f){var e=[];e.push(new THREE.MeshBasicMaterial({map:new THREE.Texture(f[0])}));e.push(new THREE.MeshBasicMaterial({map:new THREE.Texture(f[1])}));e.push(new THREE.MeshBasicMaterial({map:new THREE.Texture(f[2])}));e.push(new THREE.MeshBasicMaterial({map:new THREE.Texture(f[3])}));e.push(new THREE.MeshBasicMaterial({map:new THREE.Texture(f[4])}));e.push(new THREE.MeshBasicMaterial({map:new THREE.Texture(f[5])}));
c=new THREE.Mesh(new Cube(c,c,c,1,1,e,true),new THREE.MeshFaceMaterial);a.addObject(c);return c},addPanoramaCubePlanes:function(a,c,f){var e=c/2;c=new Plane(c,c);var h=Math.PI/2,l=Math.PI;SceneUtils.addMesh(a,c,1,0,0,-e,0,0,0,new THREE.MeshBasicMaterial({map:new THREE.Texture(f[5])}));SceneUtils.addMesh(a,c,1,-e,0,0,0,h,0,new THREE.MeshBasicMaterial({map:new THREE.Texture(f[0])}));SceneUtils.addMesh(a,c,1,e,0,0,0,-h,0,new THREE.MeshBasicMaterial({map:new THREE.Texture(f[1])}));SceneUtils.addMesh(a,
c,1,0,e,0,h,0,l,new THREE.MeshBasicMaterial({map:new THREE.Texture(f[2])}));SceneUtils.addMesh(a,c,1,0,-e,0,-h,0,l,new THREE.MeshBasicMaterial({map:new THREE.Texture(f[3])}))}},ShaderUtils={lib:{fresnel:{uniforms:{mRefractionRatio:{type:"f",value:1.02},mFresnelBias:{type:"f",value:0.1},mFresnelPower:{type:"f",value:2},mFresnelScale:{type:"f",value:1},tCube:{type:"t",value:1,texture:null}},fragment_shader:"uniform samplerCube tCube;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\nvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\nrefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\nrefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\nrefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\nrefractedColor.a = 1.0;\ngl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n}",
vertex_shader:"uniform float mRefractionRatio;\nuniform float mFresnelBias;\nuniform float mFresnelScale;\nuniform float mFresnelPower;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main(void) {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = normalize ( mat3( objectMatrix[0].xyz, objectMatrix[1].xyz, objectMatrix[2].xyz ) * normal );\nvec3 I = mPosition.xyz - cameraPosition;\nvReflect = reflect( I, nWorld );\nvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\nvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\nvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\nvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\ngl_Position = projectionMatrix * mvPosition;\n}"},
normal:{uniforms:{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},tDiffuse:{type:"t",value:0,texture:null},tNormal:{type:"t",value:2,texture:null},tAO:{type:"t",value:3,texture:null},uNormalScale:{type:"f",value:1},tDisplacement:{type:"t",value:4,texture:null},uDisplacementBias:{type:"f",value:-0.5},uDisplacementScale:{type:"f",value:2.5},uPointLightPos:{type:"v3",value:new THREE.Vector3},uPointLightColor:{type:"c",value:new THREE.Color(15658734)},uDirLightPos:{type:"v3",value:new THREE.Vector3},
uDirLightColor:{type:"c",value:new THREE.Color(15658734)},uAmbientLightColor:{type:"c",value:new THREE.Color(328965)},uDiffuseColor:{type:"c",value:new THREE.Color(15658734)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(328965)},uShininess:{type:"f",value:30}},fragment_shader:"uniform vec3 uDirLightPos;\nuniform vec3 uAmbientLightColor;\nuniform vec3 uDirLightColor;\nuniform vec3 uPointLightColor;\nuniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform bool enableDiffuse;\nuniform bool enableAO;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tAO;\nuniform float uNormalScale;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vPointLightVector;\nvarying vec3 vViewPosition;\nvoid main() {\nvec3 diffuseTex = vec3( 1.0, 1.0, 1.0 );\nvec3 aoTex = vec3( 1.0, 1.0, 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse )\ndiffuseTex = texture2D( tDiffuse, vUv ).xyz;\nif( enableAO )\naoTex = texture2D( tAO, vUv ).xyz;\nmat3 tsb = mat3( vTangent, vBinormal, vNormal );\nvec3 finalNormal = tsb * normalTex;\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\nvec4 pointDiffuse  = vec4( 0.0, 0.0, 0.0, 0.0 );\nvec4 pointSpecular = vec4( 0.0, 0.0, 0.0, 0.0 );\nvec3 pointVector = normalize( vPointLightVector );\nvec3 pointHalfVector = normalize( vPointLightVector + vViewPosition );\nfloat pointDotNormalHalf = dot( normal, pointHalfVector );\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\nfloat pointSpecularWeight = 0.0;\nif ( pointDotNormalHalf >= 0.0 )\npointSpecularWeight = pow( pointDotNormalHalf, uShininess );\npointDiffuse  += vec4( uDiffuseColor, 1.0 ) * pointDiffuseWeight;\npointSpecular += vec4( uSpecularColor, 1.0 ) * pointSpecularWeight;\nvec4 dirDiffuse  = vec4( 0.0, 0.0, 0.0, 0.0 );\nvec4 dirSpecular = vec4( 0.0, 0.0, 0.0, 0.0 );\nvec4 lDirection = viewMatrix * vec4( uDirLightPos, 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nvec3 dirHalfVector = normalize( lDirection.xyz + vViewPosition );\nfloat dirDotNormalHalf = dot( normal, dirHalfVector );\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\nfloat dirSpecularWeight = 0.0;\nif ( dirDotNormalHalf >= 0.0 )\ndirSpecularWeight = pow( dirDotNormalHalf, uShininess );\ndirDiffuse  += vec4( uDiffuseColor, 1.0 ) * dirDiffuseWeight;\ndirSpecular += vec4( uSpecularColor, 1.0 ) * dirSpecularWeight;\nvec4 totalLight = vec4( uAmbientLightColor * uAmbientColor, 1.0 );\ntotalLight += vec4( uDirLightColor, 1.0 ) * ( dirDiffuse + dirSpecular );\ntotalLight += vec4( uPointLightColor, 1.0 ) * ( pointDiffuse + pointSpecular );\ngl_FragColor = vec4( totalLight.xyz * aoTex * diffuseTex, 1.0 );\n}",
vertex_shader:"attribute vec4 tangent;\nuniform vec3 uPointLightPos;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vPointLightVector;\nvarying vec3 vViewPosition;\nvoid main() {\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvViewPosition = cameraPosition - mPosition.xyz;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\nvBinormal = cross( vNormal, vTangent ) * tangent.w;\nvBinormal = normalize( vBinormal );\nvUv = uv;\nvec4 lPosition = viewMatrix * vec4( uPointLightPos, 1.0 );\nvPointLightVector = normalize( lPosition.xyz - mvPosition.xyz );\n#ifdef VERTEX_TEXTURES\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\nvec4 displacedPosition = vec4( vNormal.xyz * df, 0.0 ) + mvPosition;\ngl_Position = projectionMatrix * displacedPosition;\n#else\ngl_Position = projectionMatrix * mvPosition;\n#endif\n}"},
basic:{uniforms:{},vertex_shader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragment_shader:"void main() {\ngl_FragColor = vec4(1.0, 0.0, 0.0, 0.5);\n}"},cube:{uniforms:{tCube:{type:"t",value:1,texture:null}},vertex_shader:"varying vec3 vViewPosition;\nvoid main() {\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvViewPosition = cameraPosition - mPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
fragment_shader:"uniform samplerCube tCube;\nvarying vec3 vViewPosition;\nvoid main() {\nvec3 wPos = cameraPosition - vViewPosition;\ngl_FragColor = textureCube( tCube, vec3( - wPos.x, wPos.yz ) );\n}"}}},Cube=function(a,c,f,e,h,l,d,m){function k(x,H,G,j,i,r,n,v){var p,u,B=e||1,C=h||1,D=B+1,F=C+1,J=i/2,M=r/2;i=i/B;var N=r/C,P=q.vertices.length;if(x=="x"&&H=="y"||x=="y"&&H=="x")p="z";else if(x=="x"&&H=="z"||x=="z"&&H=="x")p="y";else if(x=="z"&&H=="y"||x=="y"&&H=="z")p="x";for(u=0;u<F;u++)for(r=0;r<
D;r++){var Q=new THREE.Vector3;Q[x]=(r*i-J)*G;Q[H]=(u*N-M)*j;Q[p]=n;q.vertices.push(new THREE.Vertex(Q))}for(u=0;u<C;u++)for(r=0;r<B;r++){q.faces.push(new THREE.Face4(r+D*u+P,r+D*(u+1)+P,r+1+D*(u+1)+P,r+1+D*u+P,null,v));q.uvs.push([new THREE.UV(r/B,u/C),new THREE.UV(r/B,(u+1)/C),new THREE.UV((r+1)/B,(u+1)/C),new THREE.UV((r+1)/B,u/C)])}}THREE.Geometry.call(this);var q=this,s=a/2,A=c/2,t=f/2;d=d?-1:1;if(l!==undefined)if(l instanceof Array)this.materials=l;else{this.materials=[];for(var w=0;w<6;w++)this.materials.push([l])}else this.materials=
[];this.sides={px:true,nx:true,py:true,ny:true,pz:true,nz:true};if(m!=undefined)for(var y in m)if(this.sides[y]!=undefined)this.sides[y]=m[y];this.sides.px&&k("z","y",1*d,-1,f,c,-s,this.materials[0]);this.sides.nx&&k("z","y",-1*d,-1,f,c,s,this.materials[1]);this.sides.py&&k("x","z",1*d,1,a,f,A,this.materials[2]);this.sides.ny&&k("x","z",1*d,-1,a,f,-A,this.materials[3]);this.sides.pz&&k("x","y",1*d,-1,a,c,t,this.materials[4]);this.sides.nz&&k("x","y",-1*d,-1,a,c,-t,this.materials[5]);(function(){for(var x=
[],H=[],G=0,j=q.vertices.length;G<j;G++){for(var i=q.vertices[G],r=false,n=0,v=x.length;n<v;n++){var p=x[n];if(i.position.x==p.position.x&&i.position.y==p.position.y&&i.position.z==p.position.z){H[G]=n;r=true;break}}if(!r){H[G]=x.length;x.push(new THREE.Vertex(i.position.clone()))}}G=0;for(j=q.faces.length;G<j;G++){i=q.faces[G];i.a=H[i.a];i.b=H[i.b];i.c=H[i.c];i.d=H[i.d]}q.vertices=x})();this.computeCentroids();this.computeFaceNormals();this.sortFacesByMaterial()};Cube.prototype=new THREE.Geometry;
Cube.prototype.constructor=Cube;
var Cylinder=function(a,c,f,e,h){function l(q,s,A){d.vertices.push(new THREE.Vertex(new THREE.Vector3(q,s,A)))}THREE.Geometry.call(this);var d=this,m=Math.PI,k;for(k=0;k<a;k++)l(Math.sin(2*m*k/a)*c,Math.cos(2*m*k/a)*c,0);for(k=0;k<a;k++)l(Math.sin(2*m*k/a)*f,Math.cos(2*m*k/a)*f,e);for(k=0;k<a;k++)d.faces.push(new THREE.Face4(k,k+a,a+(k+1)%a,(k+1)%a));if(f!=0){l(0,0,-h);for(k=a;k<a+a/2;k++)d.faces.push(new THREE.Face4(2*a,(2*k-2*a)%a,(2*k-2*a+1)%a,(2*k-2*a+2)%a))}if(c!=0){l(0,0,e+h);for(k=a+a/2;k<
2*a;k++)d.faces.push(new THREE.Face4((2*k-2*a+2)%a+a,(2*k-2*a+1)%a+a,(2*k-2*a)%a+a,2*a+1))}this.computeCentroids();this.computeFaceNormals();this.sortFacesByMaterial()};Cylinder.prototype=new THREE.Geometry;Cylinder.prototype.constructor=Cylinder;
var Plane=function(a,c,f,e){THREE.Geometry.call(this);var h,l=a/2,d=c/2;f=f||1;e=e||1;var m=f+1,k=e+1;a=a/f;var q=c/e;for(h=0;h<k;h++)for(c=0;c<m;c++)this.vertices.push(new THREE.Vertex(new THREE.Vector3(c*a-l,-(h*q-d),0)));for(h=0;h<e;h++)for(c=0;c<f;c++){this.faces.push(new THREE.Face4(c+m*h,c+m*(h+1),c+1+m*(h+1),c+1+m*h));this.uvs.push([new THREE.UV(c/f,h/e),new THREE.UV(c/f,(h+1)/e),new THREE.UV((c+1)/f,(h+1)/e),new THREE.UV((c+1)/f,h/e)])}this.computeCentroids();this.computeFaceNormals();this.sortFacesByMaterial()};
Plane.prototype=new THREE.Geometry;Plane.prototype.constructor=Plane;
var Sphere=function(a,c,f){THREE.Geometry.call(this);var e,h=Math.PI,l=Math.max(3,c||8),d=Math.max(2,f||6);c=[];for(f=0;f<d+1;f++){e=f/d;var m=a*Math.cos(e*h),k=a*Math.sin(e*h),q=[],s=0;for(e=0;e<l;e++){var A=2*e/l,t=k*Math.sin(A*h);A=k*Math.cos(A*h);(f==0||f==d)&&e>0||(s=this.vertices.push(new THREE.Vertex(new THREE.Vector3(A,m,t)))-1);q.push(s)}c.push(q)}var w,y,x;h=c.length;for(f=0;f<h;f++){l=c[f].length;if(f>0)for(e=0;e<l;e++){q=e==l-1;d=c[f][q?0:e+1];m=c[f][q?l-1:e];k=c[f-1][q?l-1:e];q=c[f-1][q?
0:e+1];t=f/(h-1);w=(f-1)/(h-1);y=(e+1)/l;A=e/l;s=new THREE.UV(1-y,t);t=new THREE.UV(1-A,t);A=new THREE.UV(1-A,w);var H=new THREE.UV(1-y,w);if(f<c.length-1){w=this.vertices[d].position.clone();y=this.vertices[m].position.clone();x=this.vertices[k].position.clone();w.normalize();y.normalize();x.normalize();this.faces.push(new THREE.Face3(d,m,k,[new THREE.Vector3(w.x,w.y,w.z),new THREE.Vector3(y.x,y.y,y.z),new THREE.Vector3(x.x,x.y,x.z)]));this.uvs.push([s,t,A])}if(f>1){w=this.vertices[d].position.clone();
y=this.vertices[k].position.clone();x=this.vertices[q].position.clone();w.normalize();y.normalize();x.normalize();this.faces.push(new THREE.Face3(d,k,q,[new THREE.Vector3(w.x,w.y,w.z),new THREE.Vector3(y.x,y.y,y.z),new THREE.Vector3(x.x,x.y,x.z)]));this.uvs.push([s,A,H])}}}this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals();this.sortFacesByMaterial();this.boundingSphere={radius:a}};Sphere.prototype=new THREE.Geometry;Sphere.prototype.constructor=Sphere;
THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?this.addStatusElement():null};
THREE.Loader.prototype={addStatusElement:function(){var a=document.createElement("div");a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="#b00";a.style.color="#fff";a.style.width="140px";a.style.padding="0.25em 0.25em 0.25em 0.5em";a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var c="Loaded ";c+=a.total?(100*a.loaded/a.total).toFixed(0)+"%":(a.loaded/1E3).toFixed(2)+" KB";this.statusDomElement.innerHTML=
c},loadAsciiOld:function(a,c){var f=document.createElement("script");f.type="text/javascript";f.onload=c;f.src=a;document.getElementsByTagName("head")[0].appendChild(f)},loadAscii:function(a,c,f){var e=(new Date).getTime();a=new Worker(a);a.onmessage=function(h){THREE.Loader.prototype.createModel(h.data,c,f)};a.postMessage(e)},loadBinary:function(a,c,f){var e=(new Date).getTime();a=new Worker(a);var h=this.showProgress?THREE.Loader.prototype.updateProgress:null;a.onmessage=function(l){THREE.Loader.prototype.loadAjaxBuffers(l.data.buffers,
l.data.materials,c,f,h)};a.onerror=function(l){alert("worker.onerror: "+l.message+"\n"+l.data);l.preventDefault()};a.postMessage(e)},loadAjaxBuffers:function(a,c,f,e,h){var l=new XMLHttpRequest,d=e+"/"+a,m=0;l.onreadystatechange=function(){if(l.readyState==4)l.status==200||l.status==0?THREE.Loader.prototype.createBinModel(l.responseText,f,e,c):alert("Couldn't load ["+d+"] ["+l.status+"]");else if(l.readyState==3){if(h){if(m==0)m=l.getResponseHeader("Content-Length");h({total:m,loaded:l.responseText.length})}}else if(l.readyState==
2)m=l.getResponseHeader("Content-Length")};l.open("GET",d,true);l.overrideMimeType("text/plain; charset=x-user-defined");l.setRequestHeader("Content-Type","text/plain");l.send(null)},createBinModel:function(a,c,f,e){var h=function(l){function d(o,z){var E=s(o,z),I=s(o,z+1),K=s(o,z+2),R=s(o,z+3),V=(R<<1&255|K>>7)-127;E=(K&127)<<16|I<<8|E;if(E==0&&V==-127)return 0;return(1-2*(R>>7))*(1+E*Math.pow(2,-23))*Math.pow(2,V)}function m(o,z){var E=s(o,z),I=s(o,z+1),K=s(o,z+2);return(s(o,z+3)<<24)+(K<<16)+(I<<
8)+E}function k(o,z){var E=s(o,z);return(s(o,z+1)<<8)+E}function q(o,z){var E=s(o,z);return E>127?E-256:E}function s(o,z){return o.charCodeAt(z)&255}function A(o){var z,E,I;z=m(a,o);E=m(a,o+v);I=m(a,o+p);o=k(a,o+u);THREE.Loader.prototype.f3(G,z,E,I,o)}function t(o){var z,E,I,K,R,V;z=m(a,o);E=m(a,o+v);I=m(a,o+p);K=k(a,o+u);R=m(a,o+B);V=m(a,o+C);o=m(a,o+D);THREE.Loader.prototype.f3n(G,r,z,E,I,K,R,V,o)}function w(o){var z,E,I,K;z=m(a,o);E=m(a,o+F);I=m(a,o+J);K=m(a,o+M);o=k(a,o+N);THREE.Loader.prototype.f4(G,
z,E,I,K,o)}function y(o){var z,E,I,K,R,V,W,X;z=m(a,o);E=m(a,o+F);I=m(a,o+J);K=m(a,o+M);R=k(a,o+N);V=m(a,o+P);W=m(a,o+Q);X=m(a,o+T);o=m(a,o+S);THREE.Loader.prototype.f4n(G,r,z,E,I,K,R,V,W,X,o)}function x(o){var z,E;z=m(a,o);E=m(a,o+L);o=m(a,o+O);THREE.Loader.prototype.uv3(G,n[z*2],n[z*2+1],n[E*2],n[E*2+1],n[o*2],n[o*2+1])}function H(o){var z,E,I;z=m(a,o);E=m(a,o+U);I=m(a,o+Y);o=m(a,o+Z);THREE.Loader.prototype.uv4(G,n[z*2],n[z*2+1],n[E*2],n[E*2+1],n[I*2],n[I*2+1],n[o*2],n[o*2+1])}var G=this,j=0,i,r=
[],n=[],v,p,u,B,C,D,F,J,M,N,P,Q,T,S,L,O,U,Y,Z;THREE.Geometry.call(this);THREE.Loader.prototype.init_materials(G,e,l);i={signature:a.substr(j,8),header_bytes:s(a,j+8),vertex_coordinate_bytes:s(a,j+9),normal_coordinate_bytes:s(a,j+10),uv_coordinate_bytes:s(a,j+11),vertex_index_bytes:s(a,j+12),normal_index_bytes:s(a,j+13),uv_index_bytes:s(a,j+14),material_index_bytes:s(a,j+15),nvertices:m(a,j+16),nnormals:m(a,j+16+4),nuvs:m(a,j+16+8),ntri_flat:m(a,j+16+12),ntri_smooth:m(a,j+16+16),ntri_flat_uv:m(a,j+
16+20),ntri_smooth_uv:m(a,j+16+24),nquad_flat:m(a,j+16+28),nquad_smooth:m(a,j+16+32),nquad_flat_uv:m(a,j+16+36),nquad_smooth_uv:m(a,j+16+40)};j+=i.header_bytes;v=i.vertex_index_bytes;p=i.vertex_index_bytes*2;u=i.vertex_index_bytes*3;B=i.vertex_index_bytes*3+i.material_index_bytes;C=i.vertex_index_bytes*3+i.material_index_bytes+i.normal_index_bytes;D=i.vertex_index_bytes*3+i.material_index_bytes+i.normal_index_bytes*2;F=i.vertex_index_bytes;J=i.vertex_index_bytes*2;M=i.vertex_index_bytes*3;N=i.vertex_index_bytes*
4;P=i.vertex_index_bytes*4+i.material_index_bytes;Q=i.vertex_index_bytes*4+i.material_index_bytes+i.normal_index_bytes;T=i.vertex_index_bytes*4+i.material_index_bytes+i.normal_index_bytes*2;S=i.vertex_index_bytes*4+i.material_index_bytes+i.normal_index_bytes*3;L=i.uv_index_bytes;O=i.uv_index_bytes*2;U=i.uv_index_bytes;Y=i.uv_index_bytes*2;Z=i.uv_index_bytes*3;j+=function(o){var z,E,I,K=i.vertex_coordinate_bytes*3,R=o+i.nvertices*K;for(o=o;o<R;o+=K){z=d(a,o);E=d(a,o+i.vertex_coordinate_bytes);I=d(a,
o+i.vertex_coordinate_bytes*2);THREE.Loader.prototype.v(G,z,E,I)}return i.nvertices*K}(j);j+=function(o){var z,E,I,K=i.normal_coordinate_bytes*3,R=o+i.nnormals*K;for(o=o;o<R;o+=K){z=q(a,o);E=q(a,o+i.normal_coordinate_bytes);I=q(a,o+i.normal_coordinate_bytes*2);r.push(z/127,E/127,I/127)}return i.nnormals*K}(j);j+=function(o){var z,E,I=i.uv_coordinate_bytes*2,K=o+i.nuvs*I;for(o=o;o<K;o+=I){z=d(a,o);E=d(a,o+i.uv_coordinate_bytes);n.push(z,E)}return i.nuvs*I}(j);j+=function(o){var z,E=i.vertex_index_bytes*
3+i.material_index_bytes,I=o+i.ntri_flat*E;for(z=o;z<I;z+=E)A(z);return I-o}(j);j+=function(o){var z,E=i.vertex_index_bytes*3+i.material_index_bytes+i.normal_index_bytes*3,I=o+i.ntri_smooth*E;for(z=o;z<I;z+=E)t(z);return I-o}(j);j+=function(o){var z,E=i.vertex_index_bytes*3+i.material_index_bytes,I=E+i.uv_index_bytes*3,K=o+i.ntri_flat_uv*I;for(z=o;z<K;z+=I){A(z);x(z+E)}return K-o}(j);j+=function(o){var z,E=i.vertex_index_bytes*3+i.material_index_bytes+i.normal_index_bytes*3,I=E+i.uv_index_bytes*3,
K=o+i.ntri_smooth_uv*I;for(z=o;z<K;z+=I){t(z);x(z+E)}return K-o}(j);j+=function(o){var z,E=i.vertex_index_bytes*4+i.material_index_bytes,I=o+i.nquad_flat*E;for(z=o;z<I;z+=E)w(z);return I-o}(j);j+=function(o){var z,E=i.vertex_index_bytes*4+i.material_index_bytes+i.normal_index_bytes*4,I=o+i.nquad_smooth*E;for(z=o;z<I;z+=E)y(z);return I-o}(j);j+=function(o){var z,E=i.vertex_index_bytes*4+i.material_index_bytes,I=E+i.uv_index_bytes*4,K=o+i.nquad_flat_uv*I;for(z=o;z<K;z+=I){w(z);H(z+E)}return K-o}(j);
j+=function(o){var z,E=i.vertex_index_bytes*4+i.material_index_bytes+i.normal_index_bytes*4,I=E+i.uv_index_bytes*4,K=o+i.nquad_smooth_uv*I;for(z=o;z<K;z+=I){y(z);H(z+E)}return K-o}(j);this.computeCentroids();this.computeFaceNormals();this.sortFacesByMaterial()};h.prototype=new THREE.Geometry;h.prototype.constructor=h;c(new h(f))},createModel:function(a,c,f){var e=function(h){var l=this;THREE.Geometry.call(this);THREE.Loader.prototype.init_materials(l,a.materials,h);(function(){var d,m,k,q,s;d=0;for(m=
a.vertices.length;d<m;d+=3){k=a.vertices[d];q=a.vertices[d+1];s=a.vertices[d+2];THREE.Loader.prototype.v(l,k,q,s)}})();(function(){function d(y,x){THREE.Loader.prototype.f3(l,y[x],y[x+1],y[x+2],y[x+3])}function m(y,x){THREE.Loader.prototype.f3n(l,a.normals,y[x],y[x+1],y[x+2],y[x+3],y[x+4],y[x+5],y[x+6])}function k(y,x){THREE.Loader.prototype.f4(l,y[x],y[x+1],y[x+2],y[x+3],y[x+4])}function q(y,x){THREE.Loader.prototype.f4n(l,a.normals,y[x],y[x+1],y[x+2],y[x+3],y[x+4],y[x+5],y[x+6],y[x+7],y[x+8])}function s(y,
x){var H,G,j;H=y[x];G=y[x+1];j=y[x+2];THREE.Loader.prototype.uv3(l,a.uvs[H*2],a.uvs[H*2+1],a.uvs[G*2],a.uvs[G*2+1],a.uvs[j*2],a.uvs[j*2+1])}function A(y,x){var H,G,j,i;H=y[x];G=y[x+1];j=y[x+2];i=y[x+3];THREE.Loader.prototype.uv4(l,a.uvs[H*2],a.uvs[H*2+1],a.uvs[G*2],a.uvs[G*2+1],a.uvs[j*2],a.uvs[j*2+1],a.uvs[i*2],a.uvs[i*2+1])}var t,w;t=0;for(w=a.triangles.length;t<w;t+=4)d(a.triangles,t);t=0;for(w=a.triangles_uv.length;t<w;t+=7){d(a.triangles_uv,t);s(a.triangles_uv,t+4)}t=0;for(w=a.triangles_n.length;t<
w;t+=7)m(a.triangles_n,t);t=0;for(w=a.triangles_n_uv.length;t<w;t+=10){m(a.triangles_n_uv,t);s(a.triangles_n_uv,t+7)}t=0;for(w=a.quads.length;t<w;t+=5)k(a.quads,t);t=0;for(w=a.quads_uv.length;t<w;t+=9){k(a.quads_uv,t);A(a.quads_uv,t+5)}t=0;for(w=a.quads_n.length;t<w;t+=9)q(a.quads_n,t);t=0;for(w=a.quads_n_uv.length;t<w;t+=13){q(a.quads_n_uv,t);A(a.quads_n_uv,t+9)}})();this.computeCentroids();this.computeFaceNormals();this.sortFacesByMaterial()};e.prototype=new THREE.Geometry;e.prototype.constructor=
e;c(new e(f))},v:function(a,c,f,e){a.vertices.push(new THREE.Vertex(new THREE.Vector3(c,f,e)))},f3:function(a,c,f,e,h){a.faces.push(new THREE.Face3(c,f,e,null,a.materials[h]))},f4:function(a,c,f,e,h,l){a.faces.push(new THREE.Face4(c,f,e,h,null,a.materials[l]))},f3n:function(a,c,f,e,h,l,d,m,k){l=a.materials[l];var q=c[m*3],s=c[m*3+1];m=c[m*3+2];var A=c[k*3],t=c[k*3+1];k=c[k*3+2];a.faces.push(new THREE.Face3(f,e,h,[new THREE.Vector3(c[d*3],c[d*3+1],c[d*3+2]),new THREE.Vector3(q,s,m),new THREE.Vector3(A,
t,k)],l))},f4n:function(a,c,f,e,h,l,d,m,k,q,s){d=a.materials[d];var A=c[k*3],t=c[k*3+1];k=c[k*3+2];var w=c[q*3],y=c[q*3+1];q=c[q*3+2];var x=c[s*3],H=c[s*3+1];s=c[s*3+2];a.faces.push(new THREE.Face4(f,e,h,l,[new THREE.Vector3(c[m*3],c[m*3+1],c[m*3+2]),new THREE.Vector3(A,t,k),new THREE.Vector3(w,y,q),new THREE.Vector3(x,H,s)],d))},uv3:function(a,c,f,e,h,l,d){var m=[];m.push(new THREE.UV(c,f));m.push(new THREE.UV(e,h));m.push(new THREE.UV(l,d));a.uvs.push(m)},uv4:function(a,c,f,e,h,l,d,m,k){var q=[];
q.push(new THREE.UV(c,f));q.push(new THREE.UV(e,h));q.push(new THREE.UV(l,d));q.push(new THREE.UV(m,k));a.uvs.push(q)},init_materials:function(a,c,f){a.materials=[];for(var e=0;e<c.length;++e)a.materials[e]=[THREE.Loader.prototype.createMaterial(c[e],f)]},createMaterial:function(a,c){function f(l){l=Math.log(l)/Math.LN2;return Math.floor(l)==l}var e,h;if(a.map_diffuse&&c){h=document.createElement("canvas");e=new THREE.MeshLambertMaterial({map:new THREE.Texture(h)});h=new Image;h.onload=function(){if(!f(this.width)||
!f(this.height)){var l=Math.pow(2,Math.round(Math.log(this.width)/Math.LN2)),d=Math.pow(2,Math.round(Math.log(this.height)/Math.LN2));e.map.image.width=l;e.map.image.height=d;e.map.image.getContext("2d").drawImage(this,0,0,l,d)}else e.map.image=this;e.map.image.loaded=1};h.src=c+"/"+a.map_diffuse}else if(a.col_diffuse){h=(a.col_diffuse[0]*255<<16)+(a.col_diffuse[1]*255<<8)+a.col_diffuse[2]*255;e=new THREE.MeshLambertMaterial({color:h,opacity:a.transparency})}else e=a.a_dbg_color?new THREE.MeshLambertMaterial({color:a.a_dbg_color}):
new THREE.MeshLambertMaterial({color:15658734});return e}};
